/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package dia.umpire.gui;

import dia.umpire.exceptions.FileWritingException;
import dia.umpire.exceptions.ParsingException;
import dia.umpire.params.CometParams;
import dia.umpire.params.ThisAppProps;
import dia.umpire.params.UmpireParams;
import dia.umpire.util.LogUtils;
import dia.umpire.util.PropertiesUtils;

import java.awt.Component;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Properties;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.DefaultCaret;

/**
 *
 * @author dattam
 */
public class UmpireUnargetedDbSearchFrame extends javax.swing.JFrame {

    protected ExecutorService exec;

    /**
     * Creates new form UmpireUnargetedDbSearchPanel
     */
    public UmpireUnargetedDbSearchFrame() {
        initComponents();
        initManual();
    }

    public void enableComponents(Container container, boolean enable) {
        Component[] components = container.getComponents();
        for (Component component : components) {
            component.setEnabled(enable);
            if (component instanceof Container) {
                enableComponents((Container)component, enable);
            }
        }
    }

    private void initManual() {
        exec = Executors.newFixedThreadPool(1);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabPane = new javax.swing.JTabbedPane();
        panelInTabSelectFiles = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtAreaSelectedFiles = new javax.swing.JTextArea();
        btnSelectRawFiles = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        panelInTabSeParams = new javax.swing.JPanel();
        panelUmpireFragGroup = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        chkAdjustFragIntensity = new javax.swing.JCheckBox();
        chkBoostComplementaryIon = new javax.swing.JCheckBox();
        fmtRPmax = new javax.swing.JFormattedTextField();
        fmtRFmax = new javax.swing.JFormattedTextField();
        fmtCorrThreshold = new javax.swing.JFormattedTextField();
        fmtDeltaApex = new javax.swing.JFormattedTextField();
        fmtRTOverlap = new javax.swing.JFormattedTextField();
        panelUmpireSeParams = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        fmtMS1PPM = new javax.swing.JFormattedTextField();
        jLabel7 = new javax.swing.JLabel();
        fmtMS2PPM = new javax.swing.JFormattedTextField();
        jLabel8 = new javax.swing.JLabel();
        fmtSN = new javax.swing.JFormattedTextField();
        jLabel9 = new javax.swing.JLabel();
        fmtMS2SN = new javax.swing.JFormattedTextField();
        jLabel10 = new javax.swing.JLabel();
        fmtMinMSIntensity = new javax.swing.JFormattedTextField();
        jLabel11 = new javax.swing.JLabel();
        fmtMinMSMSIntensity = new javax.swing.JFormattedTextField();
        jLabel12 = new javax.swing.JLabel();
        fmtMaxCurveRTRange = new javax.swing.JFormattedTextField();
        lblNoMissedScan = new javax.swing.JLabel();
        fmtNoMissedScan = new javax.swing.JFormattedTextField();
        jLabel13 = new javax.swing.JLabel();
        fmtMinFrag = new javax.swing.JFormattedTextField();
        jLabel15 = new javax.swing.JLabel();
        fmtMinNoPeakCluster = new javax.swing.JFormattedTextField();
        jLabel16 = new javax.swing.JLabel();
        fmtMaxNoPeakCluster = new javax.swing.JFormattedTextField();
        chkEstimateBG = new javax.swing.JCheckBox();
        jLabel19 = new javax.swing.JLabel();
        panelUmpireSwathParams = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        comboWindowType = new javax.swing.JComboBox<>();
        jLabel18 = new javax.swing.JLabel();
        fmtWindowSize = new javax.swing.JFormattedTextField();
        panelUmpireBinary = new javax.swing.JPanel();
        txtUmpireConfigFile = new javax.swing.JTextField();
        btnSelectUmpireParamFile = new javax.swing.JButton();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        txtBinUmpire = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jLabel31 = new javax.swing.JLabel();
        txtBinMsconvert = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        chkRunUmpire = new javax.swing.JCheckBox();
        panelInTabCometParams = new javax.swing.JPanel();
        panelCometSequence = new javax.swing.JPanel();
        btnBrowseDatabasePath = new javax.swing.JButton();
        txtDatabasePath = new javax.swing.JTextField();
        panelCometTolerance = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        fmtpeptide_mass_tolerance = new javax.swing.JFormattedTextField();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        fmtfragment_bin_tol = new javax.swing.JFormattedTextField();
        jLabel22 = new javax.swing.JLabel();
        fmtfragment_bin_offset = new javax.swing.JFormattedTextField();
        jLabel23 = new javax.swing.JLabel();
        fmttheoretical_fragment_ions = new javax.swing.JFormattedTextField();
        chkRunCometSearch = new javax.swing.JCheckBox();
        panelCometBinary = new javax.swing.JPanel();
        jLabel29 = new javax.swing.JLabel();
        txtBinPhilosopher = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        txtCometParamsFile = new javax.swing.JTextField();
        btnSelectCometParamsFile = new javax.swing.JButton();
        jLabel30 = new javax.swing.JLabel();
        panelRun = new javax.swing.JPanel();
        btnRun = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        btnClearConsole = new javax.swing.JButton();
        consoleScrollPane = new javax.swing.JScrollPane();
        console = new dia.umpire.gui.TextConsole();
        DefaultCaret caret = (DefaultCaret) console.getCaret();
        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
        jLabel24 = new javax.swing.JLabel();
        spinnerRam = new javax.swing.JSpinner();
        jLabel25 = new javax.swing.JLabel();
        spinnerThreads = new javax.swing.JSpinner();
        jLabel26 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        btnSelectWrkingDir = new javax.swing.JButton();
        txtWorkingDir = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tabPane.setToolTipText("");
        tabPane.setName(""); // NOI18N

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Selected files"));

        txtAreaSelectedFiles.setColumns(20);
        txtAreaSelectedFiles.setRows(5);
        txtAreaSelectedFiles.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtAreaSelectedFiles.setEnabled(false);
        jScrollPane1.setViewportView(txtAreaSelectedFiles);

        btnSelectRawFiles.setText("Add files");
        btnSelectRawFiles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectRawFilesActionPerformed(evt);
            }
        });

        jButton1.setText("Clear");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 473, Short.MAX_VALUE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(btnSelectRawFiles)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 472, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSelectRawFiles)
                    .addComponent(jButton1))
                .addContainerGap())
        );

        javax.swing.GroupLayout panelInTabSelectFilesLayout = new javax.swing.GroupLayout(panelInTabSelectFiles);
        panelInTabSelectFiles.setLayout(panelInTabSelectFilesLayout);
        panelInTabSelectFilesLayout.setHorizontalGroup(
            panelInTabSelectFilesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelInTabSelectFilesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        panelInTabSelectFilesLayout.setVerticalGroup(
            panelInTabSelectFilesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelInTabSelectFilesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabPane.addTab("Raw Files", panelInTabSelectFiles);

        panelUmpireFragGroup.setBorder(javax.swing.BorderFactory.createTitledBorder("Fragment grouping"));

        jLabel1.setText("RPmax");

        jLabel2.setText("RFmax");
        jLabel2.setToolTipText("");

        jLabel3.setText("CorrThreshold");

        jLabel4.setText("DeltaApex");

        jLabel5.setText("RTOverlap");

        chkAdjustFragIntensity.setText("AdjustFragIntensity");
        chkAdjustFragIntensity.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);

        chkBoostComplementaryIon.setText("BoostComplementaryIon");
        chkBoostComplementaryIon.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);

        fmtRPmax.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        fmtRPmax.setMinimumSize(new java.awt.Dimension(50, 24));
        fmtRPmax.setPreferredSize(new java.awt.Dimension(50, 24));

        fmtRFmax.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter()));
        fmtRFmax.setMinimumSize(new java.awt.Dimension(50, 24));
        fmtRFmax.setPreferredSize(new java.awt.Dimension(50, 24));
        fmtRFmax.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fmtRFmaxActionPerformed(evt);
            }
        });

        fmtCorrThreshold.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter()));
        fmtCorrThreshold.setMinimumSize(new java.awt.Dimension(50, 24));
        fmtCorrThreshold.setPreferredSize(new java.awt.Dimension(50, 24));

        fmtDeltaApex.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter()));
        fmtDeltaApex.setMinimumSize(new java.awt.Dimension(50, 24));
        fmtDeltaApex.setPreferredSize(new java.awt.Dimension(50, 24));

        fmtRTOverlap.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter()));
        fmtRTOverlap.setMinimumSize(new java.awt.Dimension(50, 24));
        fmtRTOverlap.setPreferredSize(new java.awt.Dimension(50, 24));

        javax.swing.GroupLayout panelUmpireFragGroupLayout = new javax.swing.GroupLayout(panelUmpireFragGroup);
        panelUmpireFragGroup.setLayout(panelUmpireFragGroupLayout);
        panelUmpireFragGroupLayout.setHorizontalGroup(
            panelUmpireFragGroupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelUmpireFragGroupLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelUmpireFragGroupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelUmpireFragGroupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelUmpireFragGroupLayout.createSequentialGroup()
                        .addComponent(fmtRTOverlap, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(chkAdjustFragIntensity)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(chkBoostComplementaryIon))
                    .addGroup(panelUmpireFragGroupLayout.createSequentialGroup()
                        .addComponent(fmtRPmax, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fmtRFmax, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fmtCorrThreshold, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fmtDeltaApex, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelUmpireFragGroupLayout.setVerticalGroup(
            panelUmpireFragGroupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelUmpireFragGroupLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panelUmpireFragGroupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(fmtRPmax, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fmtRFmax, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fmtCorrThreshold, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fmtDeltaApex, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelUmpireFragGroupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(chkAdjustFragIntensity)
                    .addComponent(chkBoostComplementaryIon)
                    .addComponent(fmtRTOverlap, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        panelUmpireSeParams.setBorder(javax.swing.BorderFactory.createTitledBorder("Singnal Extraction (SE) params"));

        jLabel6.setText("MS1PPM");

        fmtMS1PPM.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        fmtMS1PPM.setMinimumSize(new java.awt.Dimension(50, 24));
        fmtMS1PPM.setPreferredSize(new java.awt.Dimension(50, 24));

        jLabel7.setText("MS2PPM");

        fmtMS2PPM.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        fmtMS2PPM.setMinimumSize(new java.awt.Dimension(50, 24));
        fmtMS2PPM.setPreferredSize(new java.awt.Dimension(50, 24));

        jLabel8.setText("SN");

        fmtSN.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        fmtSN.setMinimumSize(new java.awt.Dimension(50, 24));
        fmtSN.setPreferredSize(new java.awt.Dimension(50, 24));

        jLabel9.setText("MS2SN");

        fmtMS2SN.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter()));
        fmtMS2SN.setMinimumSize(new java.awt.Dimension(50, 24));
        fmtMS2SN.setPreferredSize(new java.awt.Dimension(50, 24));

        jLabel10.setText("MinMSIntensity");

        fmtMinMSIntensity.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter()));
        fmtMinMSIntensity.setMinimumSize(new java.awt.Dimension(50, 24));
        fmtMinMSIntensity.setPreferredSize(new java.awt.Dimension(50, 24));

        jLabel11.setText("MinMSMSIntensity");

        fmtMinMSMSIntensity.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter()));
        fmtMinMSMSIntensity.setMinimumSize(new java.awt.Dimension(50, 24));
        fmtMinMSMSIntensity.setPreferredSize(new java.awt.Dimension(50, 24));

        jLabel12.setText("MaxCurveRTRange");

        fmtMaxCurveRTRange.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter()));
        fmtMaxCurveRTRange.setMinimumSize(new java.awt.Dimension(50, 24));
        fmtMaxCurveRTRange.setPreferredSize(new java.awt.Dimension(50, 24));

        lblNoMissedScan.setText("Num. MissedScan");

        fmtNoMissedScan.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        fmtNoMissedScan.setMinimumSize(new java.awt.Dimension(50, 24));
        fmtNoMissedScan.setPreferredSize(new java.awt.Dimension(50, 24));

        jLabel13.setText("MinFrag");

        fmtMinFrag.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        fmtMinFrag.setMinimumSize(new java.awt.Dimension(50, 24));
        fmtMinFrag.setPreferredSize(new java.awt.Dimension(50, 24));

        jLabel15.setText("MinNoPeakCluster");

        fmtMinNoPeakCluster.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        fmtMinNoPeakCluster.setMinimumSize(new java.awt.Dimension(50, 24));
        fmtMinNoPeakCluster.setPreferredSize(new java.awt.Dimension(50, 24));
        fmtMinNoPeakCluster.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fmtMinNoPeakClusterActionPerformed(evt);
            }
        });

        jLabel16.setText("MaxNoPeakCluster");

        fmtMaxNoPeakCluster.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        fmtMaxNoPeakCluster.setToolTipText("");
        fmtMaxNoPeakCluster.setMinimumSize(new java.awt.Dimension(50, 24));
        fmtMaxNoPeakCluster.setPreferredSize(new java.awt.Dimension(50, 24));

        chkEstimateBG.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        chkEstimateBG.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);

        jLabel19.setText("EstimateBG");

        javax.swing.GroupLayout panelUmpireSeParamsLayout = new javax.swing.GroupLayout(panelUmpireSeParams);
        panelUmpireSeParams.setLayout(panelUmpireSeParamsLayout);
        panelUmpireSeParamsLayout.setHorizontalGroup(
            panelUmpireSeParamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelUmpireSeParamsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelUmpireSeParamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10)
                    .addComponent(jLabel6)
                    .addComponent(lblNoMissedScan)
                    .addComponent(jLabel15))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelUmpireSeParamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fmtMS1PPM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fmtMinMSIntensity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fmtNoMissedScan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fmtMinNoPeakCluster, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelUmpireSeParamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel13, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel16, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(10, 10, 10)
                .addGroup(panelUmpireSeParamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fmtMaxNoPeakCluster, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panelUmpireSeParamsLayout.createSequentialGroup()
                        .addGroup(panelUmpireSeParamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fmtMS2PPM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fmtMinMSMSIntensity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fmtMinFrag, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panelUmpireSeParamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel8)
                            .addComponent(jLabel12)
                            .addComponent(jLabel9)
                            .addComponent(jLabel19))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelUmpireSeParamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fmtSN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fmtMaxCurveRTRange, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fmtMS2SN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chkEstimateBG, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 18, Short.MAX_VALUE))
        );
        panelUmpireSeParamsLayout.setVerticalGroup(
            panelUmpireSeParamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelUmpireSeParamsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelUmpireSeParamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(fmtMS1PPM, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(fmtMS2PPM, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(fmtSN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelUmpireSeParamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(fmtMinMSMSIntensity, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(fmtMinMSIntensity, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12)
                    .addComponent(fmtMaxCurveRTRange, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelUmpireSeParamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chkEstimateBG, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panelUmpireSeParamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblNoMissedScan)
                        .addComponent(fmtNoMissedScan, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel13)
                        .addComponent(fmtMinFrag, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel19)))
                .addGap(18, 18, 18)
                .addGroup(panelUmpireSeParamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(fmtMinNoPeakCluster, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16)
                    .addComponent(fmtMaxNoPeakCluster, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(fmtMS2SN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelUmpireSwathParams.setBorder(javax.swing.BorderFactory.createTitledBorder("Swath window params"));

        jLabel17.setText("WindowType");

        comboWindowType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SWATH" }));

        jLabel18.setText("WindowSize");

        fmtWindowSize.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter()));
        fmtWindowSize.setText("25");
        fmtWindowSize.setToolTipText("");
        fmtWindowSize.setMinimumSize(new java.awt.Dimension(50, 24));
        fmtWindowSize.setPreferredSize(new java.awt.Dimension(50, 24));

        javax.swing.GroupLayout panelUmpireSwathParamsLayout = new javax.swing.GroupLayout(panelUmpireSwathParams);
        panelUmpireSwathParams.setLayout(panelUmpireSwathParamsLayout);
        panelUmpireSwathParamsLayout.setHorizontalGroup(
            panelUmpireSwathParamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelUmpireSwathParamsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel17)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(comboWindowType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel18)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fmtWindowSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelUmpireSwathParamsLayout.setVerticalGroup(
            panelUmpireSwathParamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelUmpireSwathParamsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelUmpireSwathParamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(comboWindowType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18)
                    .addComponent(fmtWindowSize, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelUmpireBinary.setBorder(javax.swing.BorderFactory.createTitledBorder("DIA Umpire"));

        btnSelectUmpireParamFile.setText("Browse");
        btnSelectUmpireParamFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectUmpireParamFileActionPerformed(evt);
            }
        });

        jLabel27.setText("Config file");

        jLabel28.setText("Umpire");
        jLabel28.setToolTipText("If you don't have Umpire jar file on your PATH, please specify the full path");

        txtBinUmpire.setText("DIA_Umpire_SE.jar");
        txtBinUmpire.setToolTipText("If you don't have Umpire jar file on your PATH, please specify the full path");

        jButton2.setText("Browse");

        jLabel31.setText("msconvert");
        jLabel31.setToolTipText("If you don't have msconvert on your PATH, specify the full path to the executable");

        txtBinMsconvert.setText("msconvert");
        txtBinMsconvert.setToolTipText("If you don't have msconvert on your PATH, specify the full path to the executable");

        jButton4.setText("Browse");

        javax.swing.GroupLayout panelUmpireBinaryLayout = new javax.swing.GroupLayout(panelUmpireBinary);
        panelUmpireBinary.setLayout(panelUmpireBinaryLayout);
        panelUmpireBinaryLayout.setHorizontalGroup(
            panelUmpireBinaryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelUmpireBinaryLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelUmpireBinaryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel27, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel31, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel28, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelUmpireBinaryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtUmpireConfigFile)
                    .addComponent(txtBinUmpire)
                    .addComponent(txtBinMsconvert))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelUmpireBinaryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnSelectUmpireParamFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelUmpireBinaryLayout.setVerticalGroup(
            panelUmpireBinaryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelUmpireBinaryLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelUmpireBinaryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel28)
                    .addComponent(txtBinUmpire, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelUmpireBinaryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel31)
                    .addComponent(txtBinMsconvert, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelUmpireBinaryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtUmpireConfigFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSelectUmpireParamFile)
                    .addComponent(jLabel27))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        chkRunUmpire.setSelected(true);
        chkRunUmpire.setText("Run DIA Umpire Signal Extraction");
        chkRunUmpire.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkRunUmpireActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelInTabSeParamsLayout = new javax.swing.GroupLayout(panelInTabSeParams);
        panelInTabSeParams.setLayout(panelInTabSeParamsLayout);
        panelInTabSeParamsLayout.setHorizontalGroup(
            panelInTabSeParamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelInTabSeParamsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelInTabSeParamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelInTabSeParamsLayout.createSequentialGroup()
                        .addComponent(chkRunUmpire)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(panelUmpireBinary, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelUmpireSeParams, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelUmpireFragGroup, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelUmpireSwathParams, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelInTabSeParamsLayout.setVerticalGroup(
            panelInTabSeParamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelInTabSeParamsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(chkRunUmpire)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelUmpireBinary, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13)
                .addComponent(panelUmpireFragGroup, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelUmpireSeParams, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelUmpireSwathParams, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(28, Short.MAX_VALUE))
        );

        tabPane.addTab("DIA-Umpire", panelInTabSeParams);

        panelCometSequence.setBorder(javax.swing.BorderFactory.createTitledBorder("Sequence database"));

        btnBrowseDatabasePath.setText("Browse");
        btnBrowseDatabasePath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseDatabasePathActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelCometSequenceLayout = new javax.swing.GroupLayout(panelCometSequence);
        panelCometSequence.setLayout(panelCometSequenceLayout);
        panelCometSequenceLayout.setHorizontalGroup(
            panelCometSequenceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCometSequenceLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtDatabasePath)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnBrowseDatabasePath)
                .addContainerGap())
        );
        panelCometSequenceLayout.setVerticalGroup(
            panelCometSequenceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCometSequenceLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelCometSequenceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBrowseDatabasePath)
                    .addComponent(txtDatabasePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelCometTolerance.setBorder(javax.swing.BorderFactory.createTitledBorder("Mass tolerance"));

        jLabel14.setText("peptide_mass_tolerance");

        fmtpeptide_mass_tolerance.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter()));
        fmtpeptide_mass_tolerance.setMinimumSize(new java.awt.Dimension(50, 24));
        fmtpeptide_mass_tolerance.setPreferredSize(new java.awt.Dimension(50, 24));

        jLabel20.setText("(ppm)");

        jLabel21.setText("fragment_bin_tol");

        fmtfragment_bin_tol.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter()));
        fmtfragment_bin_tol.setMinimumSize(new java.awt.Dimension(50, 24));
        fmtfragment_bin_tol.setPreferredSize(new java.awt.Dimension(50, 24));

        jLabel22.setText("fragment_bin_offset");

        fmtfragment_bin_offset.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter()));
        fmtfragment_bin_offset.setMinimumSize(new java.awt.Dimension(50, 24));
        fmtfragment_bin_offset.setPreferredSize(new java.awt.Dimension(50, 24));

        jLabel23.setText("theoretical_fragment_ions");

        fmttheoretical_fragment_ions.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter()));
        fmttheoretical_fragment_ions.setMinimumSize(new java.awt.Dimension(50, 24));
        fmttheoretical_fragment_ions.setPreferredSize(new java.awt.Dimension(50, 24));

        javax.swing.GroupLayout panelCometToleranceLayout = new javax.swing.GroupLayout(panelCometTolerance);
        panelCometTolerance.setLayout(panelCometToleranceLayout);
        panelCometToleranceLayout.setHorizontalGroup(
            panelCometToleranceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCometToleranceLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelCometToleranceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel23)
                    .addComponent(jLabel22)
                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel21))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelCometToleranceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelCometToleranceLayout.createSequentialGroup()
                        .addComponent(fmtpeptide_mass_tolerance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel20))
                    .addComponent(fmtfragment_bin_tol, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fmttheoretical_fragment_ions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fmtfragment_bin_offset, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(271, Short.MAX_VALUE))
        );
        panelCometToleranceLayout.setVerticalGroup(
            panelCometToleranceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCometToleranceLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelCometToleranceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(fmtpeptide_mass_tolerance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel20))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelCometToleranceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21)
                    .addComponent(fmtfragment_bin_tol, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelCometToleranceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(fmtfragment_bin_offset, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel22, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panelCometToleranceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel23)
                    .addComponent(fmttheoretical_fragment_ions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        chkRunCometSearch.setSelected(true);
        chkRunCometSearch.setText("Run Comet search");
        chkRunCometSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkRunCometSearchActionPerformed(evt);
            }
        });

        panelCometBinary.setBorder(javax.swing.BorderFactory.createTitledBorder("Comet"));

        jLabel29.setText("Comet (Philosopher)");

        txtBinPhilosopher.setText("philosopher_windows_amd64");

        jButton3.setText("Browse");

        btnSelectCometParamsFile.setText("Browse");
        btnSelectCometParamsFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectCometParamsFileActionPerformed(evt);
            }
        });

        jLabel30.setText("Config file");

        javax.swing.GroupLayout panelCometBinaryLayout = new javax.swing.GroupLayout(panelCometBinary);
        panelCometBinary.setLayout(panelCometBinaryLayout);
        panelCometBinaryLayout.setHorizontalGroup(
            panelCometBinaryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCometBinaryLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelCometBinaryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel29, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel30, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelCometBinaryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelCometBinaryLayout.createSequentialGroup()
                        .addComponent(txtCometParamsFile)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSelectCometParamsFile))
                    .addGroup(panelCometBinaryLayout.createSequentialGroup()
                        .addComponent(txtBinPhilosopher)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3)))
                .addContainerGap())
        );
        panelCometBinaryLayout.setVerticalGroup(
            panelCometBinaryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCometBinaryLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelCometBinaryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel29)
                    .addComponent(txtBinPhilosopher, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelCometBinaryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCometParamsFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSelectCometParamsFile)
                    .addComponent(jLabel30))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout panelInTabCometParamsLayout = new javax.swing.GroupLayout(panelInTabCometParams);
        panelInTabCometParams.setLayout(panelInTabCometParamsLayout);
        panelInTabCometParamsLayout.setHorizontalGroup(
            panelInTabCometParamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelInTabCometParamsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelInTabCometParamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelCometSequence, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelCometTolerance, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(panelInTabCometParamsLayout.createSequentialGroup()
                        .addComponent(chkRunCometSearch)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(panelCometBinary, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelInTabCometParamsLayout.setVerticalGroup(
            panelInTabCometParamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelInTabCometParamsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(chkRunCometSearch)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelCometBinary, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelCometSequence, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelCometTolerance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(200, Short.MAX_VALUE))
        );

        tabPane.addTab("Comet", panelInTabCometParams);

        btnRun.setText("Run");
        btnRun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRunActionPerformed(evt);
            }
        });

        btnCancel.setText("Cancel");

        btnClearConsole.setText("Clear console");
        btnClearConsole.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearConsoleActionPerformed(evt);
            }
        });

        consoleScrollPane.setViewportView(console);

        jLabel24.setText("RAM");

        spinnerRam.setModel(new javax.swing.SpinnerNumberModel(4, 1, null, 1));
        spinnerRam.setMinimumSize(new java.awt.Dimension(40, 20));
        spinnerRam.setPreferredSize(new java.awt.Dimension(40, 20));

        jLabel25.setText("Threads");
        jLabel25.setToolTipText("Set to zero to use all CPU cores");

        spinnerThreads.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        spinnerThreads.setToolTipText("Set to zero to use all CPU cores");
        spinnerThreads.setMinimumSize(new java.awt.Dimension(40, 20));
        spinnerThreads.setPreferredSize(new java.awt.Dimension(40, 20));

        jLabel26.setText("(GB)");

        jLabel32.setText("Working dir");

        btnSelectWrkingDir.setText("Browse");
        btnSelectWrkingDir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectWrkingDirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelRunLayout = new javax.swing.GroupLayout(panelRun);
        panelRun.setLayout(panelRunLayout);
        panelRunLayout.setHorizontalGroup(
            panelRunLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelRunLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelRunLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(consoleScrollPane)
                    .addGroup(panelRunLayout.createSequentialGroup()
                        .addComponent(btnRun)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCancel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel24)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spinnerRam, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel26)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel25)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spinnerThreads, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 92, Short.MAX_VALUE)
                        .addComponent(btnClearConsole))
                    .addGroup(panelRunLayout.createSequentialGroup()
                        .addComponent(jLabel32)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtWorkingDir)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSelectWrkingDir)))
                .addContainerGap())
        );
        panelRunLayout.setVerticalGroup(
            panelRunLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelRunLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelRunLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel32)
                    .addComponent(btnSelectWrkingDir)
                    .addComponent(txtWorkingDir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelRunLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRun)
                    .addComponent(btnCancel)
                    .addComponent(btnClearConsole)
                    .addComponent(jLabel24)
                    .addComponent(spinnerRam, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel25)
                    .addComponent(spinnerThreads, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel26))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(consoleScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 488, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabPane.addTab("Run", panelRun);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabPane)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabPane)
        );

        tabPane.getAccessibleContext().setAccessibleName("Umpire SE Params");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSelectRawFilesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectRawFilesActionPerformed
        if (btnSelectRawFiles == evt.getSource()) {
            String approveText = "Select";
            JFileChooser fc = new JFileChooser();
            fc.setAcceptAllFileFilterUsed(true);
            FileNameExtensionFilter fileNameExtensionFilter = new FileNameExtensionFilter("LCMS files (mzML/mzXML)", "mzml", "mzxml");
            fc.setFileFilter(fileNameExtensionFilter);
            fc.setApproveButtonText(approveText);
            fc.setDialogTitle("Choose raw data files");
            fc.setMultiSelectionEnabled(true);
            fc.setFileSelectionMode(JFileChooser.FILES_ONLY);

            setFilechooserPathToCached(fc, ThisAppProps.PROP_LCMS_FILES_IN);

//            List<String> filePaths = splitTrim(txtFileIn.getText().trim(), ",");
//            for (int i = 0; i < filePaths.size(); i++) {
//                String filePath = filePaths.get(i);
//                Path p = Paths.get(filePath).toAbsolutePath();
//                if (Files.exists(p)) {
//                    fc.setSelectedFile(p.toFile());
//                }
//            }

            int retVal = fc.showDialog(this, approveText);
            if (retVal == JFileChooser.APPROVE_OPTION) {
                File[] files = fc.getSelectedFiles();
                for (File f : files) {
                    txtAreaSelectedFiles.append(f.toString() + "\n");
                }
                if (files.length > 0) {
                    saveFilechooserPathToCached(files[0], ThisAppProps.PROP_LCMS_FILES_IN);
                }

            } else {

            }
        }
    }//GEN-LAST:event_btnSelectRawFilesActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        txtAreaSelectedFiles.setText("");
    }//GEN-LAST:event_jButton1ActionPerformed

    private void fmtMinNoPeakClusterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fmtMinNoPeakClusterActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fmtMinNoPeakClusterActionPerformed

    private void btnSelectUmpireParamFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectUmpireParamFileActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter fileNameExtensionFilter = new FileNameExtensionFilter("Umpire .params files", "params");
        fileChooser.setFileFilter(fileNameExtensionFilter);
        fileChooser.setApproveButtonText("Select file");
        fileChooser.setApproveButtonToolTipText("Load params from this file into the GUI");
        fileChooser.setDialogTitle("Choose Umpire SE param file");
        fileChooser.setMultiSelectionEnabled(false);

        setFilechooserPathToCached(fileChooser, ThisAppProps.PROP_PARAMS_FILE_IN);

        int openDialog = fileChooser.showOpenDialog(this);
        switch (openDialog) {
            case JFileChooser.APPROVE_OPTION:
                File file = fileChooser.getSelectedFile();
                txtUmpireConfigFile.setText(Paths.get(file.getAbsolutePath()).toString());
                saveFilechooserPathToCached(file, ThisAppProps.PROP_PARAMS_FILE_IN);

                UmpireParams params = null;
                try {
                    params = loadUmpireParamsFile(file);
                } catch (ParsingException ex) {
                    JOptionPane.showMessageDialog(this, "Could not load params file", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                if (params == null) {
                    JOptionPane.showMessageDialog(this, "Could not load params file", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                
                boolean containsWindowType = params.getProps().containsKey("WindowType");
                if (!containsWindowType) {
                    JOptionPane.showMessageDialog(this, "Parameter file loaded, but did not contain WindowType", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                fillInUmpireParams(params);
                break;
        }

    }//GEN-LAST:event_btnSelectUmpireParamFileActionPerformed

    private void fmtRFmaxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fmtRFmaxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fmtRFmaxActionPerformed

    private void setFilechooserPathToCached(JFileChooser fileChooser, String propName) {
        ThisAppProps thisAppProps = ThisAppProps.loadFromTemp();
        if (thisAppProps == null)
            return;
        String inputPath = thisAppProps.getProperty(ThisAppProps.PROP_PARAMS_FILE_IN);
        if (inputPath != null) {
            File file = Paths.get(inputPath).toFile();
            fileChooser.setCurrentDirectory(file);
        }
    }

    private void saveFilechooserPathToCached(File file, String propName) {
        ThisAppProps thisAppProps = ThisAppProps.loadFromTemp();
        if (thisAppProps == null)
            thisAppProps = new ThisAppProps();
        thisAppProps.setProperty(ThisAppProps.PROP_PARAMS_FILE_IN, file.getAbsolutePath());
        thisAppProps.save();
    }

    private void btnSelectCometParamsFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectCometParamsFileActionPerformed

        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter fileNameExtensionFilter = new FileNameExtensionFilter("Comet .params files", "params");
        fileChooser.setFileFilter(fileNameExtensionFilter);
        fileChooser.setApproveButtonText("Select file");
        fileChooser.setApproveButtonToolTipText("Load params from this file into the GUI");
        fileChooser.setDialogTitle("Choose Comet param file");
        fileChooser.setMultiSelectionEnabled(false);

        setFilechooserPathToCached(fileChooser, ThisAppProps.PROP_PARAMS_FILE_IN);

        int openDialog = fileChooser.showOpenDialog(this);
        switch (openDialog) {
            case JFileChooser.APPROVE_OPTION:
                File file = fileChooser.getSelectedFile();
                txtCometParamsFile.setText(Paths.get(file.getAbsolutePath()).toString());
                saveFilechooserPathToCached(file, ThisAppProps.PROP_PARAMS_FILE_IN);
                try {
                    CometParams cometParams = loadCometParamsFile(file);
                    fillCometParamFields(cometParams);
                } catch (ParsingException e) {
                    JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                break;
        }
    }//GEN-LAST:event_btnSelectCometParamsFileActionPerformed

    private void btnBrowseDatabasePathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseDatabasePathActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter fileNameExtensionFilter = new FileNameExtensionFilter("FASTA files", "fa", "fasta");
        fileChooser.setFileFilter(fileNameExtensionFilter);
        fileChooser.setApproveButtonText("Select file");
        fileChooser.setApproveButtonToolTipText("Select");
        fileChooser.setDialogTitle("Choose FASTA file");
        fileChooser.setMultiSelectionEnabled(false);

        setFilechooserPathToCached(fileChooser, ThisAppProps.PROP_PARAMS_FILE_IN);

        if (!txtDatabasePath.getText().isEmpty()) {
            File toFile = Paths.get(txtDatabasePath.getText()).toFile();
            fileChooser.setCurrentDirectory(toFile);
        }

        int showOpenDialog = fileChooser.showOpenDialog(this);
        switch (showOpenDialog) {
            case JFileChooser.APPROVE_OPTION:

                File f = fileChooser.getSelectedFile();
                txtDatabasePath.setText(f.getAbsolutePath());

                break;
        }

    }//GEN-LAST:event_btnBrowseDatabasePathActionPerformed

    private void btnRunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRunActionPerformed
        
        try {
            UmpireParams collectUmpireParams = collectUmpireParams();
            int a = 1;
        } catch (ParsingException ex) {
            Logger.getLogger(UmpireUnargetedDbSearchFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        ExecutorService exec = Executors.newSingleThreadExecutor();
        final TextConsole textConsole = console;
//        exec.submit(new Runnable() {
//            @Override
//            public void run() {
//                for (int i = 0; i < 200; i++) {
//                    try {
//                        console.append("Some text\n");
//
//                        Thread.sleep(100L);
//                    } catch (IOException ignore) {
//
//                    } catch (InterruptedException ex) {
//                    }
//                }
//            }
//        });
        String workingDir = txtWorkingDir.getText();
        if (workingDir.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Working directory can't be left empty.\n"
                    + "Please select an existing directory for the output.", "Error", JOptionPane.WARNING_MESSAGE);
            return;
        }

        String selectedFiles = txtAreaSelectedFiles.getText();
        String[] lcmsFilePaths = selectedFiles.split("\n");
        for (int i = 0; i < lcmsFilePaths.length; i++) {
            lcmsFilePaths[i] = lcmsFilePaths[i].trim();
        }
        if (selectedFiles.isEmpty() || lcmsFilePaths.length == 0) {
            JOptionPane.showMessageDialog(this, "No LC/MS data files selected.\n"
                    + "Check 'Select Raw Files' tab.", "Error", JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (!chkRunUmpire.isSelected() && !chkRunCometSearch.isSelected()) {
            JOptionPane.showMessageDialog(this, "Nothing to run.\n"
                    + "Please mark checkboxes in other tabs to run processing tools.", "Error", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        
        
        List<ProcessBuilder> processBuilders = new ArrayList();
        DateFormat df = new SimpleDateFormat("yyyy-MM-dd_HH-mm-ss");
        String dateString = df.format(new Date());
        
        // we will now compose parameter objects for running processes.
        // at first we will try to load the base parameter files, if the file paths
        // in the GUI are not empty. If empty, we will load the defaults and
        // add params from the GUI to it.
        if (chkRunUmpire.isSelected()) {
            
            String binUmpire = txtBinUmpire.getText();
            if (binUmpire.isEmpty()) {
                JOptionPane.showMessageDialog(this, "DIA Umpire binary can't be empty string", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            String binMsconvert = txtBinMsconvert.getText();
            if (binMsconvert.isEmpty()) {
                JOptionPane.showMessageDialog(this, "MSConvert binary can't be empty string", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            
            try {
                // Running Umpire
                UmpireParams collectedUmpireParams = collectUmpireParams();
                
                // writing umpire params file
                String umpireParamsFileName = UmpireParams.FILE_BASE_NAME + "_" + dateString + "." + UmpireParams.FILE_BASE_EXT;
                Path umpireParamsFilePath = Paths.get(workingDir, umpireParamsFileName);
                FileOutputStream fos = new FileOutputStream(umpireParamsFilePath.toFile());
                PropertiesUtils.writePropertiesContent(collectedUmpireParams, fos);
                
                // run umpire for each file
                Object value = spinnerRam.getModel().getValue();
                int ram = (Integer)spinnerRam.getModel().getValue();
                if (ram < 1)
                    ram = 1;
                
                List<String> createdMgfFiles = new ArrayList<>();
                List<String> createdMzXmlFiles = new ArrayList<>();
                for (String filePath : lcmsFilePaths) {
                    // umpire
                    List<String> commands = new ArrayList<>();
                    commands.add("java");
                    commands.add("-d64");
                    commands.add("-jar");
                    StringBuilder sb = new StringBuilder().append("-Xmx").append(ram).append("G");
                    commands.add(sb.toString());
                    commands.add(binUmpire);
                    commands.add(Paths.get(filePath).toAbsolutePath().toString());
                    commands.add(umpireParamsFilePath.toString());
                    
                    ProcessBuilder pb = new ProcessBuilder(commands);
                    processBuilders.add(pb);
                    
                    
                    // msconvert
                    for (int i = 1; i <= 3; i++) {
                        List<String> commandsMsconvert = new ArrayList<>();
                        commandsMsconvert.add(binMsconvert);
                        commandsMsconvert.add("--verbose");
                        commandsMsconvert.add("--param");
                        commandsMsconvert.add(umpireParamsFilePath.toString());

                        Path curMzXMl = Paths.get(filePath);
                        Path mzXmlFileName = curMzXMl.getFileName();
                        String s = mzXmlFileName.toString();
                        int indexOf = s.toLowerCase().indexOf(".mzxml");
                        String baseName = mzXmlFileName.toString().substring(0, indexOf);
                        Path createdMzXml = Paths.get(curMzXMl.getParent().toString(), baseName+"_Q"+i+".mzXML");
                        commandsMsconvert.add(createdMzXml.toString());
                        
                        ProcessBuilder pbMsconv = new ProcessBuilder(commandsMsconvert);
                        processBuilders.add(pbMsconv);
                        createdMgfFiles.add(createdMzXml.toString());
                        createdMzXmlFiles.add(createdMzXml.toString());
//                        if (Files.exists(pathToCheck)) { // this won't work as those files don't exist at process creation stage
//                            commands.add(pathToCheck.toString());
//                            processBuilders.add(pb);
//                        }
                        
                    }
                }
                
            } catch (ParsingException ex) {
                JOptionPane.showMessageDialog(this, "Error collecting user variables for Umpire.\n",
                        "Error", JOptionPane.ERROR_MESSAGE);
                return;
            } catch (FileNotFoundException | FileWritingException ex) {
                JOptionPane.showMessageDialog(this, "Error writing Umpire parameters file to working dir.\n",
                        "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }
        
        if (chkRunCometSearch.isSelected()) {
            try {
                CometParams collectedCometParams = collectCometParams();
                
                String binComet = txtBinPhilosopher.getText();
                if (binComet.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Philosopher (Comet) binary can not be an empty string.\n",
                        "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                    

                // writing Comet params file
                String cometParamsFileName = CometParams.FILE_BASE_NAME + "_" + dateString + "." + CometParams.FILE_BASE_EXT;
                Path cometParamsFilePath = Paths.get(workingDir, cometParamsFileName);
                FileOutputStream fos = new FileOutputStream(cometParamsFilePath.toFile());
                PropertiesUtils.writePropertiesContent(collectedCometParams, fos);
                
                // run comet for each file
                Object value = spinnerRam.getModel().getValue();
                int ram = (Integer)spinnerRam.getModel().getValue();
                if (ram < 1)
                    ram = 1;
                
                List<String> createdMzXmlFiles = new ArrayList<>();
                for (String filePath : lcmsFilePaths) {
                    // Comet
                    for (int i = 1; i <= 3; i++) {
                        List<String> commands = new ArrayList<>();
                        commands.add(binComet);
                        commands.add("comet ");
                        commands.add("--32");
                        commands.add("--zlib");
                        commands.add("--mzXML");
                        commands.add("--outdir");
                        commands.add(workingDir);

                        Path curMzXMl = Paths.get(filePath);
                        Path mzXmlFileName = curMzXMl.getFileName();
                    
                        String s = mzXmlFileName.toString();
                        int indexOf = s.toLowerCase().indexOf(".mzxml");
                        String baseName = mzXmlFileName.toString().substring(0, indexOf);
                        Path createdMzXml = Paths.get(curMzXMl.getParent().toString(), baseName+"_Q"+i+".mzXML");
                        commands.add(createdMzXml.toString());
                        ProcessBuilder pb = new ProcessBuilder(commands);
                        processBuilders.add(pb);
                        createdMzXmlFiles.add(createdMzXml.toString());
//                        if (Files.exists(pathToCheck)) { // this won't work as those files don't exist at process creation stage
//                            commands.add(pathToCheck.toString());
//                            processBuilders.add(pb);
//                        }
                        
                    }
                }
                
            } catch (ParsingException ex) {
                JOptionPane.showMessageDialog(this, "Error collecting user variables for Comet Search.\n",
                        "Error", JOptionPane.ERROR_MESSAGE);
                return;
            } catch (FileNotFoundException | FileWritingException ex) {
                JOptionPane.showMessageDialog(this, "Error collecting user variables for Comet Search.\n",
                        "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }
        
        LogUtils.println(console, String.format("Will execute %d commands:", processBuilders.size()));
        for (final ProcessBuilder pb : processBuilders) {
            StringBuilder sb = new StringBuilder();
            List<String> command = pb.command();
            for (String commandPart : command)
                sb.append(commandPart).append(" ");
            LogUtils.println(console, sb.toString());
        }
        LogUtils.println(console, "~~~~~~~~~~~~~~~~~~~~~~");
        LogUtils.println(console, "");
        LogUtils.println(console, "");
        
        
        exec = Executors.newFixedThreadPool(1);
        for (final ProcessBuilder pb : processBuilders) {
            
            pb.directory(Paths.get(workingDir).toFile());
            
            REHandler reHandler;
            reHandler = new REHandler(new Runnable() {
                @Override
                public void run() {
                    try {
                        Process process = pb.start();
                        
                        InputStream err = process.getErrorStream();
                        InputStream out = process.getInputStream();
                        while (true) {
                            Thread.sleep(200L);
                            if (err.available() > 0) {
                                byte[] bytes = new byte[err.available()];
                                int read = err.read(bytes);
                                console.append(new String(bytes));
                            }
                            if (out.available() > 0) {
                                byte[] bytes = new byte[out.available()];
                                int read = out.read(bytes);
                                console.append(new String(bytes));
                            }
                            try {
                                int exitValue = process.exitValue();
                                console.append(String.format("Job finished, exit value: %d\n", exitValue));
                                break;
                            } catch (IllegalThreadStateException e) {
                                
                            }
                        }
                        
                    } catch (IOException ex) {
                    } catch (InterruptedException ex) {
                        //Logger.getLogger(UmpireUnargetedDbSearchFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }, console, System.err);
            exec.submit(reHandler);
        }
        
        //final ProcessBuilder pb = new ProcessBuilder(null);
//        Runnable runnable = new Runnable() {
//            @Override
//            public void run() {
//                
//            }
//        };
//        REHandler reHandler = new REHandler(runnable, System.err, console);
//        exec.execute(reHandler);
    }//GEN-LAST:event_btnRunActionPerformed

    
    private CometParams collectCometParams() throws ParsingException {
        try {
            
            // load deafaults
            CometParams params = null;
            String userSpecifiedFileLoc = txtCometParamsFile.getText();
            if (userSpecifiedFileLoc.isEmpty()) {
                params = CometParams.parseDefault();
            } else {
                params = CometParams.parse(new FileInputStream(userSpecifiedFileLoc));
            }
            
            // now fill in the values from the UI
            DecimalFormat fmt = new DecimalFormat("#.####");
            Properties props = params.getProps();
            String dbPath = txtDatabasePath.getText();
            if (dbPath.isEmpty())
                throw new ParsingException("Comet search database path can't be empty");
            
            props.setProperty(CometParams.PROP_database_name, dbPath);
            props.setProperty(CometParams.PROP_fragment_bin_offset, fmtfragment_bin_offset.getText());
            props.setProperty(CometParams.PROP_fragment_bin_tol, fmtfragment_bin_tol.getText());
            props.setProperty(CometParams.PROP_peptide_mass_tolerance, fmtpeptide_mass_tolerance.getText());
            props.setProperty(CometParams.PROP_theoretical_fragment_ions, fmttheoretical_fragment_ions.getText());
            //props.setProperty(CometParams.PROP_, fmt.getText());
            
            return params;
        } catch (FileNotFoundException ex) {
            throw new ParsingException("Error collecting user-specified params for Umpire", ex);
        }
    }

    public UmpireParams collectUmpireParams() throws ParsingException {
        try {
            
            // load deafaults
            UmpireParams params = null;
            String userSpecifiedFileLoc = txtUmpireConfigFile.getText();
            if (userSpecifiedFileLoc.isEmpty()) {
                params = UmpireParams.parseDefault();
            } else {
                params = UmpireParams.parse(new FileInputStream(userSpecifiedFileLoc));
            }
            
            // now fill in the values from the UI
            DecimalFormat fmt = new DecimalFormat("#.####");
            Properties props = params.getProps();
            props.setProperty(UmpireParams.PROP_AdjustFragIntensity, Boolean.toString(chkAdjustFragIntensity.isSelected()));
            props.setProperty(UmpireParams.PROP_BoostComplementaryIon, Boolean.toString(chkBoostComplementaryIon.isSelected()));
            props.setProperty(UmpireParams.PROP_CorrThreshold, fmtCorrThreshold.getText());
            props.setProperty(UmpireParams.PROP_DeltaApex, fmtDeltaApex.getText());
            props.setProperty(UmpireParams.PROP_EstimateBG, Boolean.toString(chkEstimateBG.isSelected()));
            props.setProperty(UmpireParams.PROP_MS1PPM, fmtMS1PPM.getText());
            props.setProperty(UmpireParams.PROP_MS2PPM, fmtMS2PPM.getText());
            props.setProperty(UmpireParams.PROP_MS2SN, fmtMS2SN.getText());
            props.setProperty(UmpireParams.PROP_MaxCurveRTRange, fmtMaxCurveRTRange.getText());
            props.setProperty(UmpireParams.PROP_MaxNoPeakCluster, fmtMaxNoPeakCluster.getText());
            props.setProperty(UmpireParams.PROP_MinFrag, fmtMinFrag.getText());
            props.setProperty(UmpireParams.PROP_MinMSIntensity, fmtMinMSIntensity.getText());
            props.setProperty(UmpireParams.PROP_MinMSMSIntensity, fmtMinMSMSIntensity.getText());
            props.setProperty(UmpireParams.PROP_NoMissedScan, fmtNoMissedScan.getText());
            props.setProperty(UmpireParams.PROP_RFmax, fmtRFmax.getText());
            props.setProperty(UmpireParams.PROP_RPmax, fmtRPmax.getText());
            props.setProperty(UmpireParams.PROP_RTOverlap, fmtRTOverlap.getText());
            props.setProperty(UmpireParams.PROP_SN, fmtSN.getText());
            props.setProperty(UmpireParams.PROP_WindowSize, fmtWindowSize.getText());
            Object selectedWindowType = comboWindowType.getSelectedItem();
            props.setProperty(UmpireParams.PROP_WindowType, (String)selectedWindowType);
            //props.setProperty(UmpireParams.PROP_, fmt.getText());
            
            //adding the number of threads
            int numThreads = (Integer)spinnerThreads.getValue();
            if (numThreads == 0)
                numThreads = Runtime.getRuntime().availableProcessors();
            props.setProperty(UmpireParams.PROP_Threads, Integer.toString(numThreads));
            
            return params;
        } catch (FileNotFoundException ex) {
            throw new ParsingException("Error collecting user-specified params for Umpire", ex);
        }
    }

    
    public static class REHandler implements Runnable {
        Runnable delegate;
        Appendable[] outs;
        public REHandler (Runnable delegate, Appendable... out) {
            this.delegate = delegate;
            this.outs = out;
        }
        public void run () {
            try {
                delegate.run ();
            } catch (Exception e) {
                //log.error("Something bad happened in a worker thread", e);
                String msg = String.format("Something bad happened in a worker thread:\n%s", e.getMessage());
                for (Appendable out : outs) {
                    LogUtils.println(out, msg);
                }
            }
        }
    }


    private void btnClearConsoleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearConsoleActionPerformed
        console.setText("");
    }//GEN-LAST:event_btnClearConsoleActionPerformed

    private void chkRunUmpireActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkRunUmpireActionPerformed
        boolean selected = chkRunUmpire.isSelected();
        Container[] comps = new Container[] {
            panelUmpireFragGroup,
            panelUmpireSeParams,
            panelUmpireSwathParams,
            panelUmpireBinary
        };
        for (Container c : comps) {
            enableComponents(c, selected);
        }
    }//GEN-LAST:event_chkRunUmpireActionPerformed

    private void chkRunCometSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkRunCometSearchActionPerformed
        boolean selected = chkRunCometSearch.isSelected();
        Container[] comps = new Container[] {
            panelCometBinary,
            panelCometSequence,
            panelCometTolerance
        };
        for (Container c : comps) {
            enableComponents(c, selected);
        }
    }//GEN-LAST:event_chkRunCometSearchActionPerformed

    private void btnSelectWrkingDirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectWrkingDirActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        //FileNameExtensionFilter fileNameExtensionFilter = new FileNameExtensionFilter("FASTA files", "fa", "fasta");
        //fileChooser.setFileFilter(fileNameExtensionFilter);
        fileChooser.setApproveButtonText("Select directory");
        fileChooser.setApproveButtonToolTipText("Select");
        fileChooser.setDialogTitle("Choose working directory");
        fileChooser.setMultiSelectionEnabled(false);
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        setFilechooserPathToCached(fileChooser, ThisAppProps.PROP_PARAMS_FILE_IN);

        if (!txtWorkingDir.getText().isEmpty()) {
            File toFile = Paths.get(txtWorkingDir.getText()).toFile();
            fileChooser.setCurrentDirectory(toFile);
        }

        int showOpenDialog = fileChooser.showOpenDialog(this);
        switch (showOpenDialog) {
            case JFileChooser.APPROVE_OPTION:

                File f = fileChooser.getSelectedFile();
                txtWorkingDir.setText(f.getAbsolutePath());

                break;
        }
    }//GEN-LAST:event_btnSelectWrkingDirActionPerformed

    private CometParams loadCometParamsFile(File file) throws ParsingException {
        try (FileInputStream fis = new FileInputStream(file)) {
            CometParams params = CometParams.parse(fis);
            return params;
        } catch (FileNotFoundException ex) {
            throw new ParsingException(ex);
        } catch (IOException ex) {
            throw new ParsingException(ex);
        }
    }

    private void fillCometParamFields(CometParams cometParams) throws ParsingException {
        Properties props = cometParams.getProps();

        String databasePath  = props.getProperty(CometParams.PROP_database_name);
        if (databasePath == null) {
            //throw new ParsingException("Could not find database path in the parsed properties");
        } else {
            txtDatabasePath.setText(databasePath);
        }

        fmtpeptide_mass_tolerance.setText(props.getProperty(CometParams.PROP_peptide_mass_tolerance));
        fmtfragment_bin_tol.setText(props.getProperty(CometParams.PROP_fragment_bin_tol));
        fmtfragment_bin_offset.setText(props.getProperty(CometParams.PROP_fragment_bin_offset));
        fmttheoretical_fragment_ions.setText(props.getProperty(CometParams.PROP_theoretical_fragment_ions));
    }

    private static List<String> splitTrim(String input, String sep) {
        String[] split = input.split(sep);
        List<String> strings = new ArrayList<>(split.length);
        for (int i = 0; i < split.length; i++) {
            split[i] = split[i].trim();
            if (!split[i].isEmpty()) {
                strings.add(split[i]);
            }
        }
        return strings;
    }

    private UmpireParams loadUmpireParamsFile(File file) throws ParsingException {
        try (FileInputStream fis = new FileInputStream(file)) {
            UmpireParams params = UmpireParams.parse(fis);
            return params;
        } catch (FileNotFoundException ex) {
            throw new ParsingException(ex);
        } catch (IOException ex) {
            throw new ParsingException(ex);
        }
    }

    private void fillInUmpireParams(UmpireParams params) {
        fmtRPmax.setText(params.getProps().getProperty(UmpireParams.PROP_RPmax));
        fmtRFmax.setText(params.getProps().getProperty(UmpireParams.PROP_RFmax));
        fmtCorrThreshold.setText(params.getProps().getProperty(UmpireParams.PROP_CorrThreshold));
        fmtDeltaApex.setText(params.getProps().getProperty(UmpireParams.PROP_DeltaApex));
        fmtRTOverlap.setText(params.getProps().getProperty(UmpireParams.PROP_RTOverlap));
        
        boolean getAdjustFragIntensity = Boolean.valueOf(params.getProps().getProperty(UmpireParams.PROP_AdjustFragIntensity));
        boolean getBoostComplementaryIon = Boolean.valueOf(params.getProps().getProperty(UmpireParams.PROP_BoostComplementaryIon));
        chkAdjustFragIntensity.setSelected(getAdjustFragIntensity);
        chkBoostComplementaryIon.setSelected(getBoostComplementaryIon);

        fmtMS1PPM.setText(params.getProps().getProperty(UmpireParams.PROP_MS1PPM));
        fmtMS2PPM.setText(params.getProps().getProperty(UmpireParams.PROP_MS2PPM));
        fmtSN.setText(params.getProps().getProperty(UmpireParams.PROP_SN));
        fmtMS2SN.setText(params.getProps().getProperty(UmpireParams.PROP_MS2SN));
        fmtMinMSIntensity.setText(params.getProps().getProperty(UmpireParams.PROP_MinMSIntensity));
        fmtMinMSMSIntensity.setText(params.getProps().getProperty(UmpireParams.PROP_MinMSMSIntensity));
        fmtMaxCurveRTRange.setText(params.getProps().getProperty(UmpireParams.PROP_MaxCurveRTRange));
        fmtNoMissedScan.setText(params.getProps().getProperty(UmpireParams.PROP_NoMissedScan));
        fmtMinFrag.setText(params.getProps().getProperty(UmpireParams.PROP_MinFrag));
        chkEstimateBG.setSelected(Boolean.valueOf(params.getProps().getProperty(UmpireParams.PROP_EstimateBG)));
        fmtMinNoPeakCluster.setText(params.getProps().getProperty(UmpireParams.PROP_MinNoPeakCluster));
        fmtMaxNoPeakCluster.setText(params.getProps().getProperty(UmpireParams.PROP_MaxNoPeakCluster));


        fmtWindowSize.setText(params.getProps().getProperty(UmpireParams.PROP_WindowSize));
        //.setText(params.getProperty(UmpireParams.PROP_));


    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */

        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException e1) {
            java.util.logging.Logger.getLogger(UmpireUnargetedDbSearchFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, e1);
            try {
                for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                    if ("Nimbus".equals(info.getName())) {
                        javax.swing.UIManager.setLookAndFeel(info.getClassName());
                        break;
                    }
                }
            } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException e2) {
                java.util.logging.Logger.getLogger(UmpireUnargetedDbSearchFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, e2);
            }
        }
        //</editor-fold>
        //</editor-fold>

        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                UmpireUnargetedDbSearchFrame frame = new UmpireUnargetedDbSearchFrame();
                frame.setVisible(true);
                Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
                frame.setLocation(dim.width/2-frame.getSize().width/2, dim.height/2-frame.getSize().height/2);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBrowseDatabasePath;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnClearConsole;
    private javax.swing.JButton btnRun;
    private javax.swing.JButton btnSelectCometParamsFile;
    private javax.swing.JButton btnSelectRawFiles;
    private javax.swing.JButton btnSelectUmpireParamFile;
    private javax.swing.JButton btnSelectWrkingDir;
    private javax.swing.JCheckBox chkAdjustFragIntensity;
    private javax.swing.JCheckBox chkBoostComplementaryIon;
    private javax.swing.JCheckBox chkEstimateBG;
    private javax.swing.JCheckBox chkRunCometSearch;
    private javax.swing.JCheckBox chkRunUmpire;
    private javax.swing.JComboBox<String> comboWindowType;
    private dia.umpire.gui.TextConsole console;
    private javax.swing.JScrollPane consoleScrollPane;
    private javax.swing.JFormattedTextField fmtCorrThreshold;
    private javax.swing.JFormattedTextField fmtDeltaApex;
    private javax.swing.JFormattedTextField fmtMS1PPM;
    private javax.swing.JFormattedTextField fmtMS2PPM;
    private javax.swing.JFormattedTextField fmtMS2SN;
    private javax.swing.JFormattedTextField fmtMaxCurveRTRange;
    private javax.swing.JFormattedTextField fmtMaxNoPeakCluster;
    private javax.swing.JFormattedTextField fmtMinFrag;
    private javax.swing.JFormattedTextField fmtMinMSIntensity;
    private javax.swing.JFormattedTextField fmtMinMSMSIntensity;
    private javax.swing.JFormattedTextField fmtMinNoPeakCluster;
    private javax.swing.JFormattedTextField fmtNoMissedScan;
    private javax.swing.JFormattedTextField fmtRFmax;
    private javax.swing.JFormattedTextField fmtRPmax;
    private javax.swing.JFormattedTextField fmtRTOverlap;
    private javax.swing.JFormattedTextField fmtSN;
    private javax.swing.JFormattedTextField fmtWindowSize;
    private javax.swing.JFormattedTextField fmtfragment_bin_offset;
    private javax.swing.JFormattedTextField fmtfragment_bin_tol;
    private javax.swing.JFormattedTextField fmtpeptide_mass_tolerance;
    private javax.swing.JFormattedTextField fmttheoretical_fragment_ions;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblNoMissedScan;
    private javax.swing.JPanel panelCometBinary;
    private javax.swing.JPanel panelCometSequence;
    private javax.swing.JPanel panelCometTolerance;
    private javax.swing.JPanel panelInTabCometParams;
    private javax.swing.JPanel panelInTabSeParams;
    private javax.swing.JPanel panelInTabSelectFiles;
    private javax.swing.JPanel panelRun;
    private javax.swing.JPanel panelUmpireBinary;
    private javax.swing.JPanel panelUmpireFragGroup;
    private javax.swing.JPanel panelUmpireSeParams;
    private javax.swing.JPanel panelUmpireSwathParams;
    private javax.swing.JSpinner spinnerRam;
    private javax.swing.JSpinner spinnerThreads;
    private javax.swing.JTabbedPane tabPane;
    private javax.swing.JTextArea txtAreaSelectedFiles;
    private javax.swing.JTextField txtBinMsconvert;
    private javax.swing.JTextField txtBinPhilosopher;
    private javax.swing.JTextField txtBinUmpire;
    private javax.swing.JTextField txtCometParamsFile;
    private javax.swing.JTextField txtDatabasePath;
    private javax.swing.JTextField txtUmpireConfigFile;
    private javax.swing.JTextField txtWorkingDir;
    // End of variables declaration//GEN-END:variables

}
