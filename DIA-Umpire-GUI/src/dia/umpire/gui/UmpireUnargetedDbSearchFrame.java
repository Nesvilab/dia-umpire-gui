/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package dia.umpire.gui;

import dia.umpire.params.UmpireQuantParams;
import dia.umpire.exceptions.FileWritingException;
import dia.umpire.exceptions.ParsingException;
import dia.umpire.params.CometParams;
import dia.umpire.params.PeptideProphetParams;
import dia.umpire.params.Philosopher;
import dia.umpire.params.ProteinProphetParams;
import dia.umpire.params.ThisAppProps;
import dia.umpire.params.UmpireParams;
import dia.umpire.util.FileDelete;
import dia.umpire.util.LogUtils;
import dia.umpire.util.OsUtils;
import dia.umpire.util.PropertiesUtils;
import dia.umpire.util.StringUtils;

import java.awt.Component;
import java.awt.Container;
import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Toolkit;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.file.DirectoryStream;
import java.nio.file.FileAlreadyExistsException;
import java.nio.file.FileSystems;
import java.nio.file.FileVisitResult;
import java.nio.file.FileVisitor;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.attribute.BasicFileAttributes;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Date;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.ResourceBundle;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JButton;
import javax.swing.JEditorPane;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.event.HyperlinkEvent;
import javax.swing.event.HyperlinkListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.DefaultCaret;

/**
 *
 * @author dattam
 */
public class UmpireUnargetedDbSearchFrame extends javax.swing.JFrame {

    /** In MB. */
    protected static int MIN_RAM = 512;
    
    protected ExecutorService exec;
    private final List<Process> submittedProcesses = new ArrayList<>(100);

    /**
     * Creates new form UmpireUnargetedDbSearchPanel
     */
    public UmpireUnargetedDbSearchFrame() {
        initComponents();
        initManual();
    }

    public void enableComponents(Container container, boolean enable) {
        Component[] components = container.getComponents();
        for (Component component : components) {
            component.setEnabled(enable);
            if (component instanceof Container) {
                enableComponents((Container)component, enable);
            }
        }
    }

    private void initManual() {
        exec = Executors.newFixedThreadPool(1);
    }
    
    private String getDefaultPhilosopherBinName() {
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("dia/umpire/gui/Bundle"); // NOI18N
        String winName = bundle.getString("default.philosopher.win"); // NOI18N
        String nixName = bundle.getString("default.philosopher.nix"); // NOI18N
        if (OsUtils.isWindows())
            return winName;
        return nixName;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabPane = new javax.swing.JTabbedPane();
        panelInTabSelectFiles = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtAreaSelectedFiles = new javax.swing.JTextArea();
        btnSelectRawFiles = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        panelInTabSeParams = new javax.swing.JPanel();
        panelUmpireFragGroup = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        chkAdjustFragIntensity = new javax.swing.JCheckBox();
        chkBoostComplementaryIon = new javax.swing.JCheckBox();
        fmtRPmax = new javax.swing.JFormattedTextField();
        fmtRFmax = new javax.swing.JFormattedTextField();
        fmtCorrThreshold = new javax.swing.JFormattedTextField();
        fmtDeltaApex = new javax.swing.JFormattedTextField();
        fmtRTOverlap = new javax.swing.JFormattedTextField();
        panelUmpireSeParams = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        fmtMS1PPM = new javax.swing.JFormattedTextField();
        jLabel7 = new javax.swing.JLabel();
        fmtMS2PPM = new javax.swing.JFormattedTextField();
        jLabel8 = new javax.swing.JLabel();
        fmtSN = new javax.swing.JFormattedTextField();
        jLabel9 = new javax.swing.JLabel();
        fmtMS2SN = new javax.swing.JFormattedTextField();
        jLabel10 = new javax.swing.JLabel();
        fmtMinMSIntensity = new javax.swing.JFormattedTextField();
        jLabel11 = new javax.swing.JLabel();
        fmtMinMSMSIntensity = new javax.swing.JFormattedTextField();
        jLabel12 = new javax.swing.JLabel();
        fmtMaxCurveRTRange = new javax.swing.JFormattedTextField();
        lblNoMissedScan = new javax.swing.JLabel();
        fmtNoMissedScan = new javax.swing.JFormattedTextField();
        jLabel13 = new javax.swing.JLabel();
        fmtMinFrag = new javax.swing.JFormattedTextField();
        jLabel15 = new javax.swing.JLabel();
        fmtMinNoPeakCluster = new javax.swing.JFormattedTextField();
        jLabel16 = new javax.swing.JLabel();
        fmtMaxNoPeakCluster = new javax.swing.JFormattedTextField();
        chkEstimateBG = new javax.swing.JCheckBox();
        jLabel19 = new javax.swing.JLabel();
        panelUmpireSwathParams = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        comboWindowType = new javax.swing.JComboBox<>();
        jLabel18 = new javax.swing.JLabel();
        fmtWindowSize = new javax.swing.JFormattedTextField();
        panelUmpireBinary = new javax.swing.JPanel();
        txtUmpireConfigFile = new javax.swing.JTextField();
        btnSelectUmpireParamFile = new javax.swing.JButton();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        txtBinUmpire = new javax.swing.JTextField();
        btnSelectUmpireJar = new javax.swing.JButton();
        lblMsconvertBin = new javax.swing.JLabel();
        txtBinMsconvert = new javax.swing.JTextField();
        btnSelectMSConvertBinay = new javax.swing.JButton();
        chkRunUmpire = new javax.swing.JCheckBox();
        btnUmpireSeCleanup = new javax.swing.JButton();
        panelInTabCometParams = new javax.swing.JPanel();
        panelCometSequence = new javax.swing.JPanel();
        btnBrowseDatabasePath = new javax.swing.JButton();
        txtCometSeqDb = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtCometCmdLineOpts = new javax.swing.JTextArea();
        jLabel37 = new javax.swing.JLabel();
        panelCometTolerance = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        fmtpeptide_mass_tolerance = new javax.swing.JFormattedTextField();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        fmtfragment_bin_tol = new javax.swing.JFormattedTextField();
        jLabel22 = new javax.swing.JLabel();
        fmtfragment_bin_offset = new javax.swing.JFormattedTextField();
        jLabel23 = new javax.swing.JLabel();
        fmttheoretical_fragment_ions = new javax.swing.JFormattedTextField();
        chkRunCometSearch = new javax.swing.JCheckBox();
        panelCometBinary = new javax.swing.JPanel();
        jLabel29 = new javax.swing.JLabel();
        txtBinComet = new javax.swing.JTextField();
        btnSelectPhilosopherBinary = new javax.swing.JButton();
        txtCometParamsFile = new javax.swing.JTextField();
        btnSelectCometParamsFile = new javax.swing.JButton();
        jLabel30 = new javax.swing.JLabel();
        panelPeptideProphet = new javax.swing.JPanel();
        panelPeptideProphetBin = new javax.swing.JPanel();
        jLabel33 = new javax.swing.JLabel();
        btnSelectPeptideProphetBin = new javax.swing.JButton();
        txtBinPeptideProphet = new javax.swing.JTextField();
        chkRunPeptideProphet = new javax.swing.JCheckBox();
        panelPeptideProphetOptions = new javax.swing.JPanel();
        jLabel34 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        txtPeptideProphetSeqDb = new javax.swing.JTextField();
        btnSelectPeptideProphetSeqDbPath = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtPeptideProphetCmdLineOptions = new javax.swing.JTextArea();
        panelProteinProphet = new javax.swing.JPanel();
        chkRunProteinProphet = new javax.swing.JCheckBox();
        panelProteinProphetBin = new javax.swing.JPanel();
        btnBinProteinProphet = new javax.swing.JButton();
        txtBinProteinProphet = new javax.swing.JTextField();
        jLabel38 = new javax.swing.JLabel();
        panelProteinProphetOptions = new javax.swing.JPanel();
        btnProteinProphetSeqDb = new javax.swing.JButton();
        txtProteinProphetSeqDb = new javax.swing.JTextField();
        jLabel39 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        txtProteinProphetCmdLineOpts = new javax.swing.JTextArea();
        jLabel40 = new javax.swing.JLabel();
        chkProteinProphetAddInteractPepXmlsSeparately = new javax.swing.JCheckBox();
        jLabel41 = new javax.swing.JLabel();
        txtProteinProphetOutputFile = new javax.swing.JTextField();
        panelUmpireQuant = new javax.swing.JPanel();
        chkRunUmpireQuant = new javax.swing.JCheckBox();
        panelUmpireQuantBin = new javax.swing.JPanel();
        btnSelectUmpireQuantJar = new javax.swing.JButton();
        jLabel42 = new javax.swing.JLabel();
        txtBinUmpireQuant = new javax.swing.JTextField();
        btnSelectUmpireConfig = new javax.swing.JButton();
        jLabel43 = new javax.swing.JLabel();
        txtUmpireQuantConfig = new javax.swing.JTextField();
        panelumpireQuantOpts = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jLabel44 = new javax.swing.JLabel();
        txtUmpireQuantSeqDb = new javax.swing.JTextField();
        jLabel45 = new javax.swing.JLabel();
        txtDecoyPrefix = new javax.swing.JTextField();
        chkInternalLibSearch = new javax.swing.JCheckBox();
        jLabel46 = new javax.swing.JLabel();
        fmtPeptideFDR = new javax.swing.JFormattedTextField();
        jLabel47 = new javax.swing.JLabel();
        fmtProteinFDR = new javax.swing.JFormattedTextField();
        chkDataSetLevelPepFDR = new javax.swing.JCheckBox();
        jLabel48 = new javax.swing.JLabel();
        comboFilterWeight = new javax.swing.JComboBox<>();
        jLabel49 = new javax.swing.JLabel();
        fmtMinWeight = new javax.swing.JFormattedTextField();
        jLabel50 = new javax.swing.JLabel();
        fmtTopNFrag = new javax.swing.JFormattedTextField();
        jLabel51 = new javax.swing.JLabel();
        fmtTopNPep = new javax.swing.JFormattedTextField();
        jLabel52 = new javax.swing.JLabel();
        fmtFreq = new javax.swing.JFormattedTextField();
        panelRun = new javax.swing.JPanel();
        btnRun = new javax.swing.JButton();
        btnStop = new javax.swing.JButton();
        btnClearConsole = new javax.swing.JButton();
        consoleScrollPane = new javax.swing.JScrollPane();
        console = new dia.umpire.gui.TextConsole();
        DefaultCaret caret = (DefaultCaret) console.getCaret();
        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
        jLabel24 = new javax.swing.JLabel();
        spinnerRam = new javax.swing.JSpinner();
        jLabel25 = new javax.swing.JLabel();
        spinnerThreads = new javax.swing.JSpinner();
        jLabel26 = new javax.swing.JLabel();
        lblOutputDir = new javax.swing.JLabel();
        btnSelectWrkingDir = new javax.swing.JButton();
        txtWorkingDir = new javax.swing.JTextField();
        btnBrowseProgramsDir = new javax.swing.JButton();
        txtProgramsDir = new javax.swing.JTextField();
        lblProgramsDir = new javax.swing.JLabel();
        btnAbout = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("DIA-Umpire GUI");

        tabPane.setToolTipText("");
        tabPane.setName(""); // NOI18N

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Selected files"));

        txtAreaSelectedFiles.setColumns(20);
        txtAreaSelectedFiles.setRows(5);
        txtAreaSelectedFiles.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtAreaSelectedFiles.setEnabled(false);
        jScrollPane1.setViewportView(txtAreaSelectedFiles);

        btnSelectRawFiles.setText("Add files");
        btnSelectRawFiles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectRawFilesActionPerformed(evt);
            }
        });

        jButton1.setText("Clear");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 550, Short.MAX_VALUE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(btnSelectRawFiles)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 514, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSelectRawFiles)
                    .addComponent(jButton1))
                .addContainerGap())
        );

        javax.swing.GroupLayout panelInTabSelectFilesLayout = new javax.swing.GroupLayout(panelInTabSelectFiles);
        panelInTabSelectFiles.setLayout(panelInTabSelectFilesLayout);
        panelInTabSelectFilesLayout.setHorizontalGroup(
            panelInTabSelectFilesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelInTabSelectFilesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        panelInTabSelectFilesLayout.setVerticalGroup(
            panelInTabSelectFilesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelInTabSelectFilesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabPane.addTab("Select Raw Files", panelInTabSelectFiles);

        panelUmpireFragGroup.setBorder(javax.swing.BorderFactory.createTitledBorder("Fragment grouping"));

        jLabel1.setText("RPmax");

        jLabel2.setText("RFmax");
        jLabel2.setToolTipText("");

        jLabel3.setText("Corr Threshold");

        jLabel4.setText("Delta Apex");

        jLabel5.setText("RT Overlap");

        chkAdjustFragIntensity.setText("Adjust Frag Intensity");
        chkAdjustFragIntensity.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);

        chkBoostComplementaryIon.setText("Boost Complementary Ions");
        chkBoostComplementaryIon.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);

        fmtRPmax.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        fmtRPmax.setMinimumSize(new java.awt.Dimension(50, 24));
        fmtRPmax.setPreferredSize(new java.awt.Dimension(50, 24));

        fmtRFmax.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter()));
        fmtRFmax.setMinimumSize(new java.awt.Dimension(50, 24));
        fmtRFmax.setPreferredSize(new java.awt.Dimension(50, 24));
        fmtRFmax.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fmtRFmaxActionPerformed(evt);
            }
        });

        fmtCorrThreshold.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter()));
        fmtCorrThreshold.setMinimumSize(new java.awt.Dimension(50, 24));
        fmtCorrThreshold.setPreferredSize(new java.awt.Dimension(50, 24));

        fmtDeltaApex.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter()));
        fmtDeltaApex.setMinimumSize(new java.awt.Dimension(50, 24));
        fmtDeltaApex.setPreferredSize(new java.awt.Dimension(50, 24));

        fmtRTOverlap.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter()));
        fmtRTOverlap.setMinimumSize(new java.awt.Dimension(50, 24));
        fmtRTOverlap.setPreferredSize(new java.awt.Dimension(50, 24));

        javax.swing.GroupLayout panelUmpireFragGroupLayout = new javax.swing.GroupLayout(panelUmpireFragGroup);
        panelUmpireFragGroup.setLayout(panelUmpireFragGroupLayout);
        panelUmpireFragGroupLayout.setHorizontalGroup(
            panelUmpireFragGroupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelUmpireFragGroupLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelUmpireFragGroupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelUmpireFragGroupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelUmpireFragGroupLayout.createSequentialGroup()
                        .addComponent(fmtRTOverlap, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(chkAdjustFragIntensity)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(chkBoostComplementaryIon))
                    .addGroup(panelUmpireFragGroupLayout.createSequentialGroup()
                        .addComponent(fmtRPmax, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fmtRFmax, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fmtCorrThreshold, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fmtDeltaApex, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelUmpireFragGroupLayout.setVerticalGroup(
            panelUmpireFragGroupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelUmpireFragGroupLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panelUmpireFragGroupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(fmtRPmax, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fmtRFmax, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fmtCorrThreshold, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fmtDeltaApex, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelUmpireFragGroupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(chkAdjustFragIntensity)
                    .addComponent(chkBoostComplementaryIon)
                    .addComponent(fmtRTOverlap, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        panelUmpireSeParams.setBorder(javax.swing.BorderFactory.createTitledBorder("Singnal Extraction (SE) params"));

        jLabel6.setText("MS1 PPM");

        fmtMS1PPM.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        fmtMS1PPM.setMinimumSize(new java.awt.Dimension(50, 24));
        fmtMS1PPM.setPreferredSize(new java.awt.Dimension(50, 24));

        jLabel7.setText("MS2 PPM");

        fmtMS2PPM.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        fmtMS2PPM.setMinimumSize(new java.awt.Dimension(50, 24));
        fmtMS2PPM.setPreferredSize(new java.awt.Dimension(50, 24));

        jLabel8.setText("S/N");

        fmtSN.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        fmtSN.setMinimumSize(new java.awt.Dimension(50, 24));
        fmtSN.setPreferredSize(new java.awt.Dimension(50, 24));

        jLabel9.setText("MS2 S/N");

        fmtMS2SN.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter()));
        fmtMS2SN.setMinimumSize(new java.awt.Dimension(50, 24));
        fmtMS2SN.setPreferredSize(new java.awt.Dimension(50, 24));

        jLabel10.setText("Min MS Intensity");

        fmtMinMSIntensity.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter()));
        fmtMinMSIntensity.setMinimumSize(new java.awt.Dimension(50, 24));
        fmtMinMSIntensity.setPreferredSize(new java.awt.Dimension(50, 24));

        jLabel11.setText("Min MS/MS Intensity");

        fmtMinMSMSIntensity.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter()));
        fmtMinMSMSIntensity.setMinimumSize(new java.awt.Dimension(50, 24));
        fmtMinMSMSIntensity.setPreferredSize(new java.awt.Dimension(50, 24));

        jLabel12.setText("Max Curve RT Range");

        fmtMaxCurveRTRange.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter()));
        fmtMaxCurveRTRange.setMinimumSize(new java.awt.Dimension(50, 24));
        fmtMaxCurveRTRange.setPreferredSize(new java.awt.Dimension(50, 24));

        lblNoMissedScan.setText("Num. MissedScan");

        fmtNoMissedScan.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        fmtNoMissedScan.setMinimumSize(new java.awt.Dimension(50, 24));
        fmtNoMissedScan.setPreferredSize(new java.awt.Dimension(50, 24));

        jLabel13.setText("Min Frag");

        fmtMinFrag.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        fmtMinFrag.setMinimumSize(new java.awt.Dimension(50, 24));
        fmtMinFrag.setPreferredSize(new java.awt.Dimension(50, 24));

        jLabel15.setText("Min N PeakCluster");

        fmtMinNoPeakCluster.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        fmtMinNoPeakCluster.setMinimumSize(new java.awt.Dimension(50, 24));
        fmtMinNoPeakCluster.setPreferredSize(new java.awt.Dimension(50, 24));
        fmtMinNoPeakCluster.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fmtMinNoPeakClusterActionPerformed(evt);
            }
        });

        jLabel16.setText("Max N PeakCluster");

        fmtMaxNoPeakCluster.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        fmtMaxNoPeakCluster.setToolTipText("");
        fmtMaxNoPeakCluster.setMinimumSize(new java.awt.Dimension(50, 24));
        fmtMaxNoPeakCluster.setPreferredSize(new java.awt.Dimension(50, 24));

        chkEstimateBG.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        chkEstimateBG.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);

        jLabel19.setText("Estimate Background");

        javax.swing.GroupLayout panelUmpireSeParamsLayout = new javax.swing.GroupLayout(panelUmpireSeParams);
        panelUmpireSeParams.setLayout(panelUmpireSeParamsLayout);
        panelUmpireSeParamsLayout.setHorizontalGroup(
            panelUmpireSeParamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelUmpireSeParamsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelUmpireSeParamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10)
                    .addComponent(jLabel6)
                    .addComponent(lblNoMissedScan)
                    .addComponent(jLabel15))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelUmpireSeParamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fmtMS1PPM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fmtMinMSIntensity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fmtNoMissedScan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fmtMinNoPeakCluster, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelUmpireSeParamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel13, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel16, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(10, 10, 10)
                .addGroup(panelUmpireSeParamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fmtMaxNoPeakCluster, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panelUmpireSeParamsLayout.createSequentialGroup()
                        .addGroup(panelUmpireSeParamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fmtMS2PPM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fmtMinMSMSIntensity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fmtMinFrag, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panelUmpireSeParamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel8)
                            .addComponent(jLabel12)
                            .addComponent(jLabel9)
                            .addComponent(jLabel19))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelUmpireSeParamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fmtSN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fmtMaxCurveRTRange, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fmtMS2SN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chkEstimateBG, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 79, Short.MAX_VALUE))
        );
        panelUmpireSeParamsLayout.setVerticalGroup(
            panelUmpireSeParamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelUmpireSeParamsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelUmpireSeParamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(fmtMS1PPM, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(fmtMS2PPM, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(fmtSN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelUmpireSeParamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(fmtMinMSMSIntensity, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(fmtMinMSIntensity, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12)
                    .addComponent(fmtMaxCurveRTRange, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelUmpireSeParamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chkEstimateBG, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panelUmpireSeParamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblNoMissedScan)
                        .addComponent(fmtNoMissedScan, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel13)
                        .addComponent(fmtMinFrag, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel19)))
                .addGap(18, 18, 18)
                .addGroup(panelUmpireSeParamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(fmtMinNoPeakCluster, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16)
                    .addComponent(fmtMaxNoPeakCluster, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(fmtMS2SN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelUmpireSwathParams.setBorder(javax.swing.BorderFactory.createTitledBorder("Swath window params"));

        jLabel17.setText("WindowType");

        comboWindowType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SWATH" }));

        jLabel18.setText("WindowSize");

        fmtWindowSize.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter()));
        fmtWindowSize.setText("25");
        fmtWindowSize.setToolTipText("");
        fmtWindowSize.setMinimumSize(new java.awt.Dimension(50, 24));
        fmtWindowSize.setPreferredSize(new java.awt.Dimension(50, 24));

        javax.swing.GroupLayout panelUmpireSwathParamsLayout = new javax.swing.GroupLayout(panelUmpireSwathParams);
        panelUmpireSwathParams.setLayout(panelUmpireSwathParamsLayout);
        panelUmpireSwathParamsLayout.setHorizontalGroup(
            panelUmpireSwathParamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelUmpireSwathParamsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel17)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(comboWindowType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel18)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fmtWindowSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelUmpireSwathParamsLayout.setVerticalGroup(
            panelUmpireSwathParamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelUmpireSwathParamsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelUmpireSwathParamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(comboWindowType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18)
                    .addComponent(fmtWindowSize, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelUmpireBinary.setBorder(javax.swing.BorderFactory.createTitledBorder("DIA Umpire"));

        btnSelectUmpireParamFile.setText("Browse");
        btnSelectUmpireParamFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectUmpireParamFileActionPerformed(evt);
            }
        });

        jLabel27.setText("Config file");

        jLabel28.setText("DIA-Umpire SE jar");
        jLabel28.setToolTipText("If you don't have Umpire jar in working directory, please specify the full path");

        txtBinUmpire.setText(getDefaultTextUmpireSe());
        txtBinUmpire.setToolTipText("If you don't have Umpire jar in working directory, please specify the full path");
        txtBinUmpire.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtBinUmpireFocusLost(evt);
            }
        });

        btnSelectUmpireJar.setText("Browse");
        btnSelectUmpireJar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectUmpireJarActionPerformed(evt);
            }
        });

        lblMsconvertBin.setText("msconvert");
        lblMsconvertBin.setToolTipText("<html>If you don't have msconvert on your PATH, specify the full path to the executable.<br/>\nOn Windows this GUI also checks \"Program Files\" for exising installations of ProteoWizard.");

        txtBinMsconvert.setText(getDefaultTextMsconvert());
        txtBinMsconvert.setToolTipText(lblMsconvertBin.getToolTipText());
        txtBinMsconvert.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtBinMsconvertFocusLost(evt);
            }
        });

        btnSelectMSConvertBinay.setText("Browse");
        btnSelectMSConvertBinay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectMSConvertBinayActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelUmpireBinaryLayout = new javax.swing.GroupLayout(panelUmpireBinary);
        panelUmpireBinary.setLayout(panelUmpireBinaryLayout);
        panelUmpireBinaryLayout.setHorizontalGroup(
            panelUmpireBinaryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelUmpireBinaryLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelUmpireBinaryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel27, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblMsconvertBin, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel28, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelUmpireBinaryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtUmpireConfigFile)
                    .addComponent(txtBinUmpire)
                    .addComponent(txtBinMsconvert))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelUmpireBinaryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnSelectUmpireParamFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnSelectMSConvertBinay, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnSelectUmpireJar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelUmpireBinaryLayout.setVerticalGroup(
            panelUmpireBinaryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelUmpireBinaryLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelUmpireBinaryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel28)
                    .addComponent(txtBinUmpire, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSelectUmpireJar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelUmpireBinaryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMsconvertBin)
                    .addComponent(txtBinMsconvert, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSelectMSConvertBinay))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelUmpireBinaryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtUmpireConfigFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSelectUmpireParamFile)
                    .addComponent(jLabel27))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        chkRunUmpire.setSelected(true);
        chkRunUmpire.setText("Run DIA Umpire Signal Extraction");
        chkRunUmpire.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkRunUmpireActionPerformed(evt);
            }
        });

        btnUmpireSeCleanup.setText("Clean Up");
        btnUmpireSeCleanup.setToolTipText("<html>When you've selected some files in \"Select Raw Files\" tab, <br/>this action will delete all the Umpire SE generated files in the same directory for those files."); // NOI18N
        btnUmpireSeCleanup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUmpireSeCleanupActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelInTabSeParamsLayout = new javax.swing.GroupLayout(panelInTabSeParams);
        panelInTabSeParams.setLayout(panelInTabSeParamsLayout);
        panelInTabSeParamsLayout.setHorizontalGroup(
            panelInTabSeParamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelInTabSeParamsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelInTabSeParamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelInTabSeParamsLayout.createSequentialGroup()
                        .addComponent(chkRunUmpire)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnUmpireSeCleanup))
                    .addComponent(panelUmpireBinary, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelUmpireSeParams, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelUmpireFragGroup, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelUmpireSwathParams, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelInTabSeParamsLayout.setVerticalGroup(
            panelInTabSeParamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelInTabSeParamsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelInTabSeParamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkRunUmpire)
                    .addComponent(btnUmpireSeCleanup))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelUmpireBinary, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13)
                .addComponent(panelUmpireFragGroup, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelUmpireSeParams, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelUmpireSwathParams, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(62, Short.MAX_VALUE))
        );

        tabPane.addTab("DIA-Umpire SE", panelInTabSeParams);

        panelCometSequence.setBorder(javax.swing.BorderFactory.createTitledBorder("Options"));

        btnBrowseDatabasePath.setText("Browse");
        btnBrowseDatabasePath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseDatabasePathActionPerformed(evt);
            }
        });

        jLabel36.setText("Sequence Database");

        txtCometCmdLineOpts.setColumns(20);
        txtCometCmdLineOpts.setLineWrap(true);
        txtCometCmdLineOpts.setRows(5);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("dia/umpire/gui/Bundle"); // NOI18N
        txtCometCmdLineOpts.setText(bundle.getString("comet.cmd.line.opts")); // NOI18N
        txtCometCmdLineOpts.setWrapStyleWord(true);
        jScrollPane3.setViewportView(txtCometCmdLineOpts);

        jLabel37.setText("Cmd Line Options");

        javax.swing.GroupLayout panelCometSequenceLayout = new javax.swing.GroupLayout(panelCometSequence);
        panelCometSequence.setLayout(panelCometSequenceLayout);
        panelCometSequenceLayout.setHorizontalGroup(
            panelCometSequenceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCometSequenceLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelCometSequenceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel37, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel36, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelCometSequenceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelCometSequenceLayout.createSequentialGroup()
                        .addComponent(txtCometSeqDb)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnBrowseDatabasePath))
                    .addComponent(jScrollPane3))
                .addContainerGap())
        );
        panelCometSequenceLayout.setVerticalGroup(
            panelCometSequenceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCometSequenceLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelCometSequenceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBrowseDatabasePath)
                    .addComponent(txtCometSeqDb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel36))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelCometSequenceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelCometSequenceLayout.createSequentialGroup()
                        .addComponent(jLabel37)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane3))
                .addContainerGap())
        );

        panelCometTolerance.setBorder(javax.swing.BorderFactory.createTitledBorder("Mass tolerance"));

        jLabel14.setText("peptide_mass_tolerance");

        fmtpeptide_mass_tolerance.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter()));
        fmtpeptide_mass_tolerance.setMinimumSize(new java.awt.Dimension(50, 24));
        fmtpeptide_mass_tolerance.setPreferredSize(new java.awt.Dimension(50, 24));

        jLabel20.setText("(ppm)");

        jLabel21.setText("fragment_bin_tol");

        fmtfragment_bin_tol.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter()));
        fmtfragment_bin_tol.setMinimumSize(new java.awt.Dimension(50, 24));
        fmtfragment_bin_tol.setPreferredSize(new java.awt.Dimension(50, 24));

        jLabel22.setText("fragment_bin_offset");

        fmtfragment_bin_offset.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter()));
        fmtfragment_bin_offset.setMinimumSize(new java.awt.Dimension(50, 24));
        fmtfragment_bin_offset.setPreferredSize(new java.awt.Dimension(50, 24));

        jLabel23.setText("theoretical_fragment_ions");

        fmttheoretical_fragment_ions.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter()));
        fmttheoretical_fragment_ions.setMinimumSize(new java.awt.Dimension(50, 24));
        fmttheoretical_fragment_ions.setPreferredSize(new java.awt.Dimension(50, 24));

        javax.swing.GroupLayout panelCometToleranceLayout = new javax.swing.GroupLayout(panelCometTolerance);
        panelCometTolerance.setLayout(panelCometToleranceLayout);
        panelCometToleranceLayout.setHorizontalGroup(
            panelCometToleranceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCometToleranceLayout.createSequentialGroup()
                .addGroup(panelCometToleranceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelCometToleranceLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(panelCometToleranceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel23, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel21, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel14, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelCometToleranceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelCometToleranceLayout.createSequentialGroup()
                                .addComponent(fmtpeptide_mass_tolerance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel20))
                            .addComponent(fmtfragment_bin_tol, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fmttheoretical_fragment_ions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fmtfragment_bin_offset, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(panelCometToleranceLayout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addComponent(jLabel22)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelCometToleranceLayout.setVerticalGroup(
            panelCometToleranceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCometToleranceLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelCometToleranceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(fmtpeptide_mass_tolerance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel20))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelCometToleranceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21)
                    .addComponent(fmtfragment_bin_tol, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelCometToleranceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(fmtfragment_bin_offset, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel22, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panelCometToleranceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel23)
                    .addComponent(fmttheoretical_fragment_ions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        chkRunCometSearch.setSelected(true);
        chkRunCometSearch.setText("Run Comet search");
        chkRunCometSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkRunCometSearchActionPerformed(evt);
            }
        });

        panelCometBinary.setBorder(javax.swing.BorderFactory.createTitledBorder("Comet"));
        panelCometBinary.setToolTipText("If you're using Philosopher to run Comet, make sure that 'comet' is the first option in 'Cmd Line Options'");

        jLabel29.setText("Comet");
        jLabel29.setToolTipText("");

        txtBinComet.setText(getDefaultTextComet());
        txtBinComet.setToolTipText("");
        txtBinComet.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtBinCometFocusLost(evt);
            }
        });

        btnSelectPhilosopherBinary.setText("Browse");
        btnSelectPhilosopherBinary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectPhilosopherBinaryActionPerformed(evt);
            }
        });

        btnSelectCometParamsFile.setText("Browse");
        btnSelectCometParamsFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectCometParamsFileActionPerformed(evt);
            }
        });

        jLabel30.setText("Config file");

        javax.swing.GroupLayout panelCometBinaryLayout = new javax.swing.GroupLayout(panelCometBinary);
        panelCometBinary.setLayout(panelCometBinaryLayout);
        panelCometBinaryLayout.setHorizontalGroup(
            panelCometBinaryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCometBinaryLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelCometBinaryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel29, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel30, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelCometBinaryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelCometBinaryLayout.createSequentialGroup()
                        .addComponent(txtCometParamsFile)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSelectCometParamsFile))
                    .addGroup(panelCometBinaryLayout.createSequentialGroup()
                        .addComponent(txtBinComet, javax.swing.GroupLayout.DEFAULT_SIZE, 406, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSelectPhilosopherBinary)))
                .addContainerGap())
        );
        panelCometBinaryLayout.setVerticalGroup(
            panelCometBinaryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCometBinaryLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelCometBinaryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel29)
                    .addComponent(txtBinComet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSelectPhilosopherBinary))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelCometBinaryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCometParamsFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSelectCometParamsFile)
                    .addComponent(jLabel30))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout panelInTabCometParamsLayout = new javax.swing.GroupLayout(panelInTabCometParams);
        panelInTabCometParams.setLayout(panelInTabCometParamsLayout);
        panelInTabCometParamsLayout.setHorizontalGroup(
            panelInTabCometParamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelInTabCometParamsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelInTabCometParamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelCometSequence, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelCometTolerance, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelCometBinary, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(panelInTabCometParamsLayout.createSequentialGroup()
                        .addComponent(chkRunCometSearch)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panelInTabCometParamsLayout.setVerticalGroup(
            panelInTabCometParamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelInTabCometParamsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(chkRunCometSearch)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelCometBinary, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelCometSequence, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelCometTolerance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(140, Short.MAX_VALUE))
        );

        tabPane.addTab("Comet", panelInTabCometParams);

        panelPeptideProphetBin.setBorder(javax.swing.BorderFactory.createTitledBorder("PeptideProphet"));
        panelPeptideProphetBin.setToolTipText("If you're using Philosopher to run PeptideProhphet, make sure 'peptideprophet' is the first command in Cmd Line Options text");

        jLabel33.setText("PeptideProphet");
        jLabel33.setToolTipText("");

        btnSelectPeptideProphetBin.setText("Browse");
        btnSelectPeptideProphetBin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectPeptideProphetBinActionPerformed(evt);
            }
        });

        txtBinPeptideProphet.setText(getDefaultTextPeptideProphet());
        txtBinPeptideProphet.setToolTipText("");
        txtBinPeptideProphet.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtBinPeptideProphetFocusLost(evt);
            }
        });

        javax.swing.GroupLayout panelPeptideProphetBinLayout = new javax.swing.GroupLayout(panelPeptideProphetBin);
        panelPeptideProphetBin.setLayout(panelPeptideProphetBinLayout);
        panelPeptideProphetBinLayout.setHorizontalGroup(
            panelPeptideProphetBinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelPeptideProphetBinLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel33)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtBinPeptideProphet)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSelectPeptideProphetBin)
                .addContainerGap())
        );
        panelPeptideProphetBinLayout.setVerticalGroup(
            panelPeptideProphetBinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelPeptideProphetBinLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelPeptideProphetBinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel33)
                    .addComponent(btnSelectPeptideProphetBin)
                    .addComponent(txtBinPeptideProphet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        chkRunPeptideProphet.setSelected(true);
        chkRunPeptideProphet.setText("Run PeptideProphet");
        chkRunPeptideProphet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkRunPeptideProphetActionPerformed(evt);
            }
        });

        panelPeptideProphetOptions.setBorder(javax.swing.BorderFactory.createTitledBorder("Options"));

        jLabel34.setText("Cmd Line Options");

        jLabel35.setText("Sequence Database");
        jLabel35.setToolTipText("If left empty, will try to get value from Comet search sequence database");

        txtPeptideProphetSeqDb.setToolTipText("If left empty, will try to get value from Comet search sequence database");

        btnSelectPeptideProphetSeqDbPath.setText("Browse");
        btnSelectPeptideProphetSeqDbPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectPeptideProphetSeqDbPathActionPerformed(evt);
            }
        });

        txtPeptideProphetCmdLineOptions.setColumns(20);
        txtPeptideProphetCmdLineOptions.setLineWrap(true);
        txtPeptideProphetCmdLineOptions.setRows(5);
        txtPeptideProphetCmdLineOptions.setText(bundle.getString("peptideprophet.cmd.line.opts")); // NOI18N
        txtPeptideProphetCmdLineOptions.setWrapStyleWord(true);
        jScrollPane2.setViewportView(txtPeptideProphetCmdLineOptions);

        javax.swing.GroupLayout panelPeptideProphetOptionsLayout = new javax.swing.GroupLayout(panelPeptideProphetOptions);
        panelPeptideProphetOptions.setLayout(panelPeptideProphetOptionsLayout);
        panelPeptideProphetOptionsLayout.setHorizontalGroup(
            panelPeptideProphetOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelPeptideProphetOptionsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelPeptideProphetOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel34, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel35, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelPeptideProphetOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelPeptideProphetOptionsLayout.createSequentialGroup()
                        .addComponent(txtPeptideProphetSeqDb)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSelectPeptideProphetSeqDbPath))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 425, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelPeptideProphetOptionsLayout.setVerticalGroup(
            panelPeptideProphetOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelPeptideProphetOptionsLayout.createSequentialGroup()
                .addGroup(panelPeptideProphetOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSelectPeptideProphetSeqDbPath)
                    .addComponent(txtPeptideProphetSeqDb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel35))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelPeptideProphetOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelPeptideProphetOptionsLayout.createSequentialGroup()
                        .addComponent(jLabel34)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout panelPeptideProphetLayout = new javax.swing.GroupLayout(panelPeptideProphet);
        panelPeptideProphet.setLayout(panelPeptideProphetLayout);
        panelPeptideProphetLayout.setHorizontalGroup(
            panelPeptideProphetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelPeptideProphetLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelPeptideProphetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelPeptideProphetBin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(panelPeptideProphetLayout.createSequentialGroup()
                        .addComponent(chkRunPeptideProphet)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(panelPeptideProphetOptions, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelPeptideProphetLayout.setVerticalGroup(
            panelPeptideProphetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelPeptideProphetLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(chkRunPeptideProphet)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelPeptideProphetBin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelPeptideProphetOptions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(324, Short.MAX_VALUE))
        );

        tabPane.addTab("PeptideProphet", panelPeptideProphet);

        chkRunProteinProphet.setSelected(true);
        chkRunProteinProphet.setText("Run ProteinProphet");
        chkRunProteinProphet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkRunProteinProphetActionPerformed(evt);
            }
        });

        panelProteinProphetBin.setBorder(javax.swing.BorderFactory.createTitledBorder("ProteinProphet"));

        btnBinProteinProphet.setText("Browse");
        btnBinProteinProphet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBinProteinProphetActionPerformed(evt);
            }
        });

        txtBinProteinProphet.setText(getDefaultTextProteinProphet());
        txtBinProteinProphet.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtBinProteinProphetFocusLost(evt);
            }
        });

        jLabel38.setText("ProteinProphet");

        javax.swing.GroupLayout panelProteinProphetBinLayout = new javax.swing.GroupLayout(panelProteinProphetBin);
        panelProteinProphetBin.setLayout(panelProteinProphetBinLayout);
        panelProteinProphetBinLayout.setHorizontalGroup(
            panelProteinProphetBinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelProteinProphetBinLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel38)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtBinProteinProphet)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnBinProteinProphet)
                .addContainerGap())
        );
        panelProteinProphetBinLayout.setVerticalGroup(
            panelProteinProphetBinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelProteinProphetBinLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelProteinProphetBinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBinProteinProphet)
                    .addComponent(txtBinProteinProphet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel38))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelProteinProphetOptions.setBorder(javax.swing.BorderFactory.createTitledBorder("Options"));

        btnProteinProphetSeqDb.setText("Browse");
        btnProteinProphetSeqDb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProteinProphetSeqDbActionPerformed(evt);
            }
        });

        txtProteinProphetSeqDb.setToolTipText("If not specified, the value will be taken from PeptideProphet or Comet tabs");

        jLabel39.setText("Sequence Database");
        jLabel39.setToolTipText("Not Used Now. If not specified, the value will be taken from PeptideProphet or Comet tabs");

        txtProteinProphetCmdLineOpts.setColumns(20);
        txtProteinProphetCmdLineOpts.setLineWrap(true);
        txtProteinProphetCmdLineOpts.setRows(5);
        txtProteinProphetCmdLineOpts.setText(bundle.getString("proteinprophet.cmd.line.opts")); // NOI18N
        txtProteinProphetCmdLineOpts.setWrapStyleWord(true);
        jScrollPane4.setViewportView(txtProteinProphetCmdLineOpts);

        jLabel40.setText("Cmd Line Options");

        chkProteinProphetAddInteractPepXmlsSeparately.setSelected(true);
        chkProteinProphetAddInteractPepXmlsSeparately.setText("Use 'interact-*pep.xml' as file filter for ProteinProphet (Philosopher only)");
        chkProteinProphetAddInteractPepXmlsSeparately.setToolTipText("<html>If checked will use 'interact-*pep.xml' to match pep.xml files to be passed to ProteinProphet.<br/> Otherwise will add files as separate entries, \nwhich might cause problems on Windows<br/> when there are many pepxml files, as the length of command line parameter string is limited to 8192 chars."); // NOI18N

        jLabel41.setText("Output File");

        txtProteinProphetOutputFile.setText(bundle.getString("default.prot.xml.filename")); // NOI18N

        javax.swing.GroupLayout panelProteinProphetOptionsLayout = new javax.swing.GroupLayout(panelProteinProphetOptions);
        panelProteinProphetOptions.setLayout(panelProteinProphetOptionsLayout);
        panelProteinProphetOptionsLayout.setHorizontalGroup(
            panelProteinProphetOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelProteinProphetOptionsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelProteinProphetOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelProteinProphetOptionsLayout.createSequentialGroup()
                        .addGroup(panelProteinProphetOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel41)
                            .addComponent(jLabel39))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panelProteinProphetOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelProteinProphetOptionsLayout.createSequentialGroup()
                                .addComponent(txtProteinProphetSeqDb)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnProteinProphetSeqDb))
                            .addComponent(txtProteinProphetOutputFile)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelProteinProphetOptionsLayout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(jLabel40)
                        .addGap(8, 8, 8)
                        .addComponent(jScrollPane4))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelProteinProphetOptionsLayout.createSequentialGroup()
                        .addGap(0, 107, Short.MAX_VALUE)
                        .addComponent(chkProteinProphetAddInteractPepXmlsSeparately)))
                .addContainerGap())
        );
        panelProteinProphetOptionsLayout.setVerticalGroup(
            panelProteinProphetOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelProteinProphetOptionsLayout.createSequentialGroup()
                .addGroup(panelProteinProphetOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnProteinProphetSeqDb)
                    .addComponent(txtProteinProphetSeqDb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel39))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelProteinProphetOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel41)
                    .addComponent(txtProteinProphetOutputFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(panelProteinProphetOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelProteinProphetOptionsLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                        .addComponent(jLabel40)
                        .addGap(123, 123, 123))
                    .addGroup(panelProteinProphetOptionsLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chkProteinProphetAddInteractPepXmlsSeparately)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        javax.swing.GroupLayout panelProteinProphetLayout = new javax.swing.GroupLayout(panelProteinProphet);
        panelProteinProphet.setLayout(panelProteinProphetLayout);
        panelProteinProphetLayout.setHorizontalGroup(
            panelProteinProphetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelProteinProphetLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelProteinProphetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelProteinProphetBin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(panelProteinProphetLayout.createSequentialGroup()
                        .addComponent(chkRunProteinProphet)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(panelProteinProphetOptions, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelProteinProphetLayout.setVerticalGroup(
            panelProteinProphetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelProteinProphetLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(chkRunProteinProphet)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelProteinProphetBin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelProteinProphetOptions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(279, Short.MAX_VALUE))
        );

        tabPane.addTab("ProteinProphet", panelProteinProphet);

        chkRunUmpireQuant.setSelected(true);
        chkRunUmpireQuant.setText("Run DIA-Umpire Quant");
        chkRunUmpireQuant.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkRunUmpireQuantActionPerformed(evt);
            }
        });

        panelUmpireQuantBin.setBorder(javax.swing.BorderFactory.createTitledBorder("DIA-Umpire Quant"));

        btnSelectUmpireQuantJar.setText("Browse");
        btnSelectUmpireQuantJar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectUmpireQuantJarActionPerformed(evt);
            }
        });

        jLabel42.setText("DIA-Umpire Quant jar");

        txtBinUmpireQuant.setText(getDefaultTextUmpireQuant());

        btnSelectUmpireConfig.setText("Browse");
        btnSelectUmpireConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectUmpireConfigActionPerformed(evt);
            }
        });

        jLabel43.setText("Config");

        javax.swing.GroupLayout panelUmpireQuantBinLayout = new javax.swing.GroupLayout(panelUmpireQuantBin);
        panelUmpireQuantBin.setLayout(panelUmpireQuantBinLayout);
        panelUmpireQuantBinLayout.setHorizontalGroup(
            panelUmpireQuantBinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelUmpireQuantBinLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelUmpireQuantBinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel42)
                    .addComponent(jLabel43))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelUmpireQuantBinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtBinUmpireQuant)
                    .addComponent(txtUmpireQuantConfig))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelUmpireQuantBinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnSelectUmpireConfig, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnSelectUmpireQuantJar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelUmpireQuantBinLayout.setVerticalGroup(
            panelUmpireQuantBinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelUmpireQuantBinLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelUmpireQuantBinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSelectUmpireQuantJar)
                    .addComponent(jLabel42)
                    .addComponent(txtBinUmpireQuant, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelUmpireQuantBinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSelectUmpireConfig)
                    .addComponent(jLabel43)
                    .addComponent(txtUmpireQuantConfig, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelumpireQuantOpts.setBorder(javax.swing.BorderFactory.createTitledBorder("Options"));

        jButton2.setText("Browse");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel44.setText("Sequence Database");

        jLabel45.setText("Decoy Prefix");

        chkInternalLibSearch.setText("Internal Lib Search");
        chkInternalLibSearch.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);

        jLabel46.setText("Peptide FDR");

        fmtPeptideFDR.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("0.0##"))));
        fmtPeptideFDR.setMinimumSize(new java.awt.Dimension(50, 22));
        fmtPeptideFDR.setPreferredSize(new java.awt.Dimension(50, 22));
        fmtPeptideFDR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fmtPeptideFDRActionPerformed(evt);
            }
        });

        jLabel47.setText("Protein FDR");

        fmtProteinFDR.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("0.00#"))));
        fmtProteinFDR.setMinimumSize(new java.awt.Dimension(60, 22));
        fmtProteinFDR.setPreferredSize(new java.awt.Dimension(60, 22));
        fmtProteinFDR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fmtProteinFDRActionPerformed(evt);
            }
        });

        chkDataSetLevelPepFDR.setText("Data Set Level Pep FDR");
        chkDataSetLevelPepFDR.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);

        jLabel48.setText("Filter Weight");

        comboFilterWeight.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "GW", "PepW" }));

        jLabel49.setText("Min Weight");

        fmtMinWeight.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter()));
        fmtMinWeight.setMinimumSize(new java.awt.Dimension(60, 22));
        fmtMinWeight.setPreferredSize(new java.awt.Dimension(60, 22));

        jLabel50.setText("Top N Frag");

        fmtTopNFrag.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(java.text.NumberFormat.getIntegerInstance())));
        fmtTopNFrag.setMinimumSize(new java.awt.Dimension(50, 22));
        fmtTopNFrag.setName(""); // NOI18N
        fmtTopNFrag.setPreferredSize(new java.awt.Dimension(50, 22));

        jLabel51.setText("Top N Pep");

        fmtTopNPep.setMinimumSize(new java.awt.Dimension(60, 22));
        fmtTopNPep.setPreferredSize(new java.awt.Dimension(60, 22));

        jLabel52.setText("Freq");

        fmtFreq.setMinimumSize(new java.awt.Dimension(60, 22));
        fmtFreq.setPreferredSize(new java.awt.Dimension(60, 22));

        javax.swing.GroupLayout panelumpireQuantOptsLayout = new javax.swing.GroupLayout(panelumpireQuantOpts);
        panelumpireQuantOpts.setLayout(panelumpireQuantOptsLayout);
        panelumpireQuantOptsLayout.setHorizontalGroup(
            panelumpireQuantOptsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelumpireQuantOptsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelumpireQuantOptsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelumpireQuantOptsLayout.createSequentialGroup()
                        .addComponent(jLabel44)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtUmpireQuantSeqDb)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2))
                    .addGroup(panelumpireQuantOptsLayout.createSequentialGroup()
                        .addGroup(panelumpireQuantOptsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel45, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel46, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel48, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel50, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGroup(panelumpireQuantOptsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelumpireQuantOptsLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(panelumpireQuantOptsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(comboFilterWeight, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(fmtPeptideFDR, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(fmtTopNFrag, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(panelumpireQuantOptsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel47, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel49, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel51, javax.swing.GroupLayout.Alignment.TRAILING)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelumpireQuantOptsLayout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addComponent(txtDecoyPrefix, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelumpireQuantOptsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelumpireQuantOptsLayout.createSequentialGroup()
                                .addComponent(fmtTopNPep, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel52)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(fmtFreq, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(panelumpireQuantOptsLayout.createSequentialGroup()
                                .addGroup(panelumpireQuantOptsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(fmtProteinFDR, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(fmtMinWeight, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addComponent(chkDataSetLevelPepFDR))
                            .addComponent(chkInternalLibSearch))
                        .addGap(0, 85, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panelumpireQuantOptsLayout.setVerticalGroup(
            panelumpireQuantOptsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelumpireQuantOptsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelumpireQuantOptsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jLabel44)
                    .addComponent(txtUmpireQuantSeqDb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelumpireQuantOptsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel45)
                    .addComponent(txtDecoyPrefix, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chkInternalLibSearch))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelumpireQuantOptsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel46)
                    .addComponent(fmtPeptideFDR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel47)
                    .addComponent(fmtProteinFDR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chkDataSetLevelPepFDR))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelumpireQuantOptsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel48)
                    .addComponent(comboFilterWeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel49)
                    .addComponent(fmtMinWeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelumpireQuantOptsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel50)
                    .addComponent(fmtTopNFrag, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel51)
                    .addComponent(fmtTopNPep, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel52)
                    .addComponent(fmtFreq, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(270, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout panelUmpireQuantLayout = new javax.swing.GroupLayout(panelUmpireQuant);
        panelUmpireQuant.setLayout(panelUmpireQuantLayout);
        panelUmpireQuantLayout.setHorizontalGroup(
            panelUmpireQuantLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelUmpireQuantLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelUmpireQuantLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelUmpireQuantBin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(panelUmpireQuantLayout.createSequentialGroup()
                        .addComponent(chkRunUmpireQuant)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(panelumpireQuantOpts, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelUmpireQuantLayout.setVerticalGroup(
            panelUmpireQuantLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelUmpireQuantLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(chkRunUmpireQuant)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelUmpireQuantBin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelumpireQuantOpts, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabPane.addTab("DIA-Umpire Quant", panelUmpireQuant);

        btnRun.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnRun.setText("Run");
        btnRun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRunActionPerformed(evt);
            }
        });

        btnStop.setText("Stop");
        btnStop.setEnabled(false);
        btnStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStopActionPerformed(evt);
            }
        });

        btnClearConsole.setText("Clear console");
        btnClearConsole.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearConsoleActionPerformed(evt);
            }
        });

        consoleScrollPane.setViewportView(console);

        jLabel24.setText("RAM");

        spinnerRam.setModel(new javax.swing.SpinnerNumberModel(1600, 512, null, 200));
        spinnerRam.setMinimumSize(new java.awt.Dimension(40, 20));
        spinnerRam.setPreferredSize(new java.awt.Dimension(40, 20));

        jLabel25.setText("Threads");
        jLabel25.setToolTipText("Set to zero to use all CPU cores");

        spinnerThreads.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        spinnerThreads.setToolTipText("Set to zero to use all CPU cores");
        spinnerThreads.setMinimumSize(new java.awt.Dimension(40, 20));
        spinnerThreads.setPreferredSize(new java.awt.Dimension(40, 20));

        jLabel26.setText("(MB)");

        lblOutputDir.setText("Output dir");
        lblOutputDir.setToolTipText("<html>All the output will be placed into this directory.<br/>\nUmpire-SE always generates output near mzXML files, <br/>\nif you stop processing early, then these files might not have been<br/>\nmoved to the Output Dir yet. For this case there is a button<br/>\non \"DIA-Umpire SE\" tab to Clean Up the generated files."); // NOI18N

        btnSelectWrkingDir.setText("Browse");
        btnSelectWrkingDir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectWrkingDirActionPerformed(evt);
            }
        });

        txtWorkingDir.setToolTipText(lblOutputDir.getToolTipText());

        btnBrowseProgramsDir.setText("Browse");
        btnBrowseProgramsDir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseProgramsDirActionPerformed(evt);
            }
        });

        txtProgramsDir.setText(getDefaultTextProgramsDir());
        txtProgramsDir.setToolTipText(lblProgramsDir.getToolTipText());

        lblProgramsDir.setText("Programs dir");
        lblProgramsDir.setToolTipText("The .jar files and executables will be searched here. <br/>\nExecutables (e.g. msconvert.exe) will also be searched using system's PATH variable.");

        btnAbout.setText("About");
        btnAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAboutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelRunLayout = new javax.swing.GroupLayout(panelRun);
        panelRun.setLayout(panelRunLayout);
        panelRunLayout.setHorizontalGroup(
            panelRunLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelRunLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelRunLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(consoleScrollPane)
                    .addGroup(panelRunLayout.createSequentialGroup()
                        .addComponent(btnRun)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnStop)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel24)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spinnerRam, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel26)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel25)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spinnerThreads, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 89, Short.MAX_VALUE)
                        .addComponent(btnAbout)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnClearConsole))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelRunLayout.createSequentialGroup()
                        .addGroup(panelRunLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblOutputDir)
                            .addComponent(lblProgramsDir))
                        .addGap(7, 7, 7)
                        .addGroup(panelRunLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelRunLayout.createSequentialGroup()
                                .addComponent(txtProgramsDir)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnBrowseProgramsDir))
                            .addGroup(panelRunLayout.createSequentialGroup()
                                .addComponent(txtWorkingDir)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnSelectWrkingDir)))))
                .addContainerGap())
        );
        panelRunLayout.setVerticalGroup(
            panelRunLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelRunLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelRunLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBrowseProgramsDir)
                    .addComponent(txtProgramsDir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblProgramsDir))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelRunLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblOutputDir)
                    .addComponent(btnSelectWrkingDir)
                    .addComponent(txtWorkingDir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelRunLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRun)
                    .addComponent(btnStop)
                    .addComponent(btnClearConsole)
                    .addComponent(jLabel24)
                    .addComponent(spinnerRam, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel25)
                    .addComponent(spinnerThreads, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel26)
                    .addComponent(btnAbout))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(consoleScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 496, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabPane.addTab("Run", panelRun);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tabPane)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabPane)
        );

        tabPane.getAccessibleContext().setAccessibleName("Umpire SE Params");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSelectRawFilesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectRawFilesActionPerformed
        if (btnSelectRawFiles == evt.getSource()) {
            String approveText = "Select";
            JFileChooser fc = new JFileChooser();
            fc.setAcceptAllFileFilterUsed(true);
            FileNameExtensionFilter fileNameExtensionFilter = new FileNameExtensionFilter("LCMS files (mzML/mzXML)", "mzml", "mzxml");
            fc.setFileFilter(fileNameExtensionFilter);
            fc.setApproveButtonText(approveText);
            fc.setDialogTitle("Choose raw data files");
            fc.setMultiSelectionEnabled(true);
            fc.setFileSelectionMode(JFileChooser.FILES_ONLY);

            setFilechooserPathToCached(fc, ThisAppProps.PROP_LCMS_FILES_IN);

            int retVal = fc.showDialog(this, approveText);
            if (retVal == JFileChooser.APPROVE_OPTION) {
                File[] files = fc.getSelectedFiles();
                for (File f : files) {
                    txtAreaSelectedFiles.append(f.toString() + "\n");
                }
                if (files.length > 0) {
                    saveFilechooserPathToCached(files[0], ThisAppProps.PROP_LCMS_FILES_IN);
                }

            } else {

            }
        }
    }//GEN-LAST:event_btnSelectRawFilesActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        txtAreaSelectedFiles.setText("");
    }//GEN-LAST:event_jButton1ActionPerformed

    private void fmtMinNoPeakClusterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fmtMinNoPeakClusterActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fmtMinNoPeakClusterActionPerformed

    private void btnSelectUmpireParamFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectUmpireParamFileActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter fileNameExtensionFilter = new FileNameExtensionFilter("Umpire .params files", "params", "txt");
        fileChooser.setFileFilter(fileNameExtensionFilter);
        fileChooser.setApproveButtonText("Select file");
        fileChooser.setApproveButtonToolTipText("Load params from this file into the GUI");
        fileChooser.setDialogTitle("Choose Umpire SE param file");
        fileChooser.setMultiSelectionEnabled(false);

        setFilechooserPathToCached(fileChooser, ThisAppProps.PROP_PARAMS_FILE_IN);

        int openDialog = fileChooser.showOpenDialog(this);
        switch (openDialog) {
            case JFileChooser.APPROVE_OPTION:
                File file = fileChooser.getSelectedFile();
                txtUmpireConfigFile.setText(Paths.get(file.getAbsolutePath()).toString());
                saveFilechooserPathToCached(file, ThisAppProps.PROP_PARAMS_FILE_IN);

                UmpireParams params = null;
                try {
                    params = loadUmpireParamsFile(file);
                } catch (ParsingException ex) {
                    JOptionPane.showMessageDialog(this, "Could not load params file", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                if (params == null) {
                    JOptionPane.showMessageDialog(this, "Could not load params file", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                
                boolean containsWindowType = params.getProps().containsKey("WindowType");
                if (!containsWindowType) {
                    JOptionPane.showMessageDialog(this, "Parameter file loaded, but did not contain WindowType", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                fillInUmpireParams(params);
                break;
        }

    }//GEN-LAST:event_btnSelectUmpireParamFileActionPerformed

    private void fmtRFmaxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fmtRFmaxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fmtRFmaxActionPerformed

    private void setFilechooserPathToCached(JFileChooser fileChooser, String propName) {
        ThisAppProps thisAppProps = ThisAppProps.loadFromTemp();
        if (thisAppProps == null)
            return;
        String inputPath = thisAppProps.getProperty(propName);
        if (inputPath != null) {
            File file = Paths.get(inputPath).toFile();
            fileChooser.setCurrentDirectory(file);
        }
    }

    private void saveFilechooserPathToCached(File file, String propName) {
        ThisAppProps thisAppProps = ThisAppProps.loadFromTemp();
        if (thisAppProps == null)
            thisAppProps = new ThisAppProps();
        thisAppProps.setProperty(propName, file.getAbsolutePath());
        thisAppProps.save();
    }

    private void btnSelectCometParamsFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectCometParamsFileActionPerformed

        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter fileNameExtensionFilter = new FileNameExtensionFilter("Comet .params files", "params", "txt");
        fileChooser.setFileFilter(fileNameExtensionFilter);
        fileChooser.setApproveButtonText("Select file");
        fileChooser.setApproveButtonToolTipText("Load params from this file into the GUI");
        fileChooser.setDialogTitle("Choose Comet param file");
        fileChooser.setMultiSelectionEnabled(false);

        setFilechooserPathToCached(fileChooser, ThisAppProps.PROP_PARAMS_FILE_IN);

        int openDialog = fileChooser.showOpenDialog(this);
        switch (openDialog) {
            case JFileChooser.APPROVE_OPTION:
                File file = fileChooser.getSelectedFile();
                txtCometParamsFile.setText(Paths.get(file.getAbsolutePath()).toString());
                saveFilechooserPathToCached(file, ThisAppProps.PROP_PARAMS_FILE_IN);
                try {
                    CometParams cometParams = loadCometParamsFile(file);
                    fillCometParamFields(cometParams);
                } catch (ParsingException e) {
                    JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                break;
        }
    }//GEN-LAST:event_btnSelectCometParamsFileActionPerformed

    private void btnBrowseDatabasePathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseDatabasePathActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter fileNameExtensionFilter = new FileNameExtensionFilter("FASTA files", "fa", "fasta");
        fileChooser.setFileFilter(fileNameExtensionFilter);
        fileChooser.setApproveButtonText("Select file");
        fileChooser.setApproveButtonToolTipText("Select");
        fileChooser.setDialogTitle("Choose FASTA file");
        fileChooser.setMultiSelectionEnabled(false);

        setFilechooserPathToCached(fileChooser, ThisAppProps.PROP_PARAMS_FILE_IN);

        if (!txtCometSeqDb.getText().isEmpty()) {
            File toFile = Paths.get(txtCometSeqDb.getText().trim()).toFile();
            fileChooser.setCurrentDirectory(toFile);
        }

        int showOpenDialog = fileChooser.showOpenDialog(this);
        switch (showOpenDialog) {
            case JFileChooser.APPROVE_OPTION:

                File f = fileChooser.getSelectedFile();
                txtCometSeqDb.setText(f.getAbsolutePath());

                break;
        }

    }//GEN-LAST:event_btnBrowseDatabasePathActionPerformed

    /**
     * Returns the value for the program, that will work with process builder.<br/>
     * Null if no working combo could be found.
     */
    private String testBinaryPath(String programName, String workingDir) {
        
        // First try running just the program, hoping that it's in the PATH
        List<String> commands = new LinkedList<>();
        commands.add(programName);
        ProcessBuilder pb = new ProcessBuilder(commands);
        try {
            Process proc = pb.start();
            proc.destroy();
            return programName;
        } catch (Exception e1) {
            // could not run the program, it was not on PATH
            // Try running the program using absolute path
            if (workingDir == null || workingDir.isEmpty())
                return null;
            try {
                commands = new LinkedList<>();
                String absolutePathProgramName = Paths.get(workingDir, programName).toAbsolutePath().toString();
                commands.add(absolutePathProgramName);
                pb = new ProcessBuilder(commands);
                Process proc = pb.start();
                proc.destroy();
                return absolutePathProgramName;
            } catch (Exception e2) {
                // could not run the program even with absolute path
            }
        }
        return null;
    }
    
    private String testFilePath(String fileName, String dir) {
        try {
            Path fileNameWasAbsolute = Paths.get(fileName);
            if (Files.exists(fileNameWasAbsolute)) {
                return fileNameWasAbsolute.toAbsolutePath().toString();
            }
        } catch (Exception e) {
            // something wrong with the path
        }
        
        try {
            Path fileNameWasRelative = Paths.get(dir, fileName);
            if (Files.exists(fileNameWasRelative)) {
                return fileNameWasRelative.toAbsolutePath().toString();
            }
        } catch (Exception e) {
            // something wrong with the path
        }
        return null;
    }
    
    private void resetRunButtons(boolean runEnabled) {
        btnRun.setEnabled(runEnabled);
        btnStop.setEnabled(!runEnabled);
    }
    
    private List<String> getLcmsFilePaths() {
        String selectedFiles = txtAreaSelectedFiles.getText();
        String[] lcmsFilePaths = selectedFiles.split("\n");
        ArrayList<String> paths = new ArrayList<>();
        for (int i = 0; i < lcmsFilePaths.length; i++) {
            lcmsFilePaths[i] = lcmsFilePaths[i].trim();
            if (lcmsFilePaths[i].isEmpty())
                continue;
            paths.add(lcmsFilePaths[i]);
        }
        return paths;
    }
    
    /**
     * This returns the paths to files to be created. Might be symlinks or actual file copies.
     * It does not create the files!
     * @param workDir
     * @return 
     */
    private List<Path> getLcmsFilePathsInWorkdir(Path workDir) {
        List<String> lcmsFilePaths = getLcmsFilePaths();
        ArrayList<Path> result = new ArrayList<>();
        for (String lcmsFilePath : lcmsFilePaths) {
            result.add(workDir.resolve(Paths.get(lcmsFilePath).getFileName()));
        }
        return result;
    }
    
    private void createLcmsFileSymlinks(Path workDir) throws IOException {
        List<String> lcmsFilePaths = getLcmsFilePaths();
        List<Path> paths = new ArrayList<>();
        for (String s : lcmsFilePaths) {
            paths.add(Paths.get(s));
        }
        
        List<Path> links = getLcmsFilePathsInWorkdir(workDir);
        for (int i = 0; i < paths.size(); i++) {
            Path lcmsPath = paths.get(i);
            Path link = links.get(i);
            if (Files.exists(link)) {
                // if that link already exists we need to make sure it points to
                // the same file
                if (!Files.isSymbolicLink(link)) {
                    throw new FileAlreadyExistsException(link.toString(), null, "A file already exists and is not a symbolic link");
                }
                Path linkTarget = Files.readSymbolicLink(link);
                if(!linkTarget.equals(lcmsPath)) {
                    String msg = String.format("A symblic link to mzXML file already exists, but points to a different file: %s", link);
                    throw new FileAlreadyExistsException(link.toString(), null, msg);
                }
            } else {
                if (!Files.isSameFile(link, lcmsPath)) {
                    Files.createSymbolicLink(link, lcmsPath);
                }
            }
        }
    }
    
    private void btnRunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRunActionPerformed
        resetRunButtons(false);
        
        Integer ramVal = (Integer)spinnerRam.getModel().getValue();
        if (ramVal < MIN_RAM) {
            String msg = String.format("Minimum amount of RAM required is %d", MIN_RAM);
            JOptionPane.showMessageDialog(this, msg, "Error", JOptionPane.WARNING_MESSAGE);
            resetRunButtons(true);
            return;
        }
            
        
        final TextConsole textConsole = console;
        final String workingDir = txtWorkingDir.getText();
        if (workingDir.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Output directory can't be left empty.\n"
                    + "Please select an existing directory for the output.", "Error", JOptionPane.WARNING_MESSAGE);
            resetRunButtons(true);
            return;
        }

        List<String> lcmsFilePaths = getLcmsFilePaths();
        if (lcmsFilePaths.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No LC/MS data files selected.\n"
                    + "Check 'Select Raw Files' tab.", "Error", JOptionPane.WARNING_MESSAGE);
            resetRunButtons(true);
            return;
        }
        
        
        List<ProcessBuilder> processBuilders = new ArrayList();
        DateFormat df = new SimpleDateFormat("yyyy-MM-dd_HH-mm-ss");
        String dateString = df.format(new Date());
        String programsDir = txtProgramsDir.getText().trim();
        
        
        if (!OsUtils.isWindows()) {
            // On Linux create symlinks to mzXML files
            try {
                createLcmsFileSymlinks(Paths.get(workingDir));
            } catch (IOException ex) {
                String msg = String.format("Something went wronng when creating symlinks to LCMS files.\n%s", ex.getMessage());
                JOptionPane.showMessageDialog(this, msg, "Error", JOptionPane.ERROR_MESSAGE);

                resetRunButtons(true);
                return;
            }
        } else {
            // On windows copy the files over to the working directory
            List<ProcessBuilder> processBuildersCopyFiles = processBuildersCopyFiles(programsDir, workingDir, lcmsFilePaths);
            processBuilders.addAll(processBuildersCopyFiles);
        }
        
        
        if (!chkRunUmpire.isSelected() 
                && !chkRunCometSearch.isSelected() 
                && !chkRunPeptideProphet.isSelected() 
                && !chkRunProteinProphet.isSelected()
                && !chkRunUmpireQuant.isSelected()) {
            JOptionPane.showMessageDialog(this, "Nothing to run.\n"
                    + "Please mark checkboxes in other tabs to run processing tools.", "Error", JOptionPane.WARNING_MESSAGE);
            resetRunButtons(true);
            return;
        }
        
        
        
        
        
        // we will now compose parameter objects for running processes.
        // at first we will try to load the base parameter files, if the file paths
        // in the GUI are not empty. If empty, we will load the defaults and
        // add params from the GUI to it.
        List<ProcessBuilder> processBuildersUmpire = processBuildersUmpire(programsDir, workingDir, lcmsFilePaths, dateString);
        if (processBuildersUmpire == null) {
            resetRunButtons(true);
            return;
        }
        processBuilders.addAll(processBuildersUmpire);
        
        List<ProcessBuilder> processBuildersComet = processBuildersComet(programsDir, workingDir, lcmsFilePaths, dateString);
        if (processBuildersComet == null) {
            resetRunButtons(true);
            return;
        }
        processBuilders.addAll(processBuildersComet);
        
        
        List<ProcessBuilder> processBuildersPeptideProphet = processBuildersPeptideProphet(programsDir, workingDir, lcmsFilePaths);
        if (processBuildersPeptideProphet == null) {
            resetRunButtons(true);
            return;
        }
        processBuilders.addAll(processBuildersPeptideProphet);
        
        
        List<ProcessBuilder> processBuildersProteinProphet = processBuildersProteinProphet(programsDir, workingDir, lcmsFilePaths);
        if (processBuildersProteinProphet == null) {
            resetRunButtons(true);
            return;
        }
        processBuilders.addAll(processBuildersProteinProphet);
        
        
        List<ProcessBuilder> processBuildersUmpireQuant = processBuildersUmpireQuant(programsDir, workingDir, lcmsFilePaths, dateString);
        if (processBuildersUmpireQuant == null) {
            resetRunButtons(true);
            return;
        }
        processBuilders.addAll(processBuildersUmpireQuant);
        
        
        
        if (!OsUtils.isWindows()) {
            // On Linux we created symlinks to mzXML files, leave them there
        } else {
            // On windows we copied the files over to the working directory
            // so will delete them now
            List<ProcessBuilder> processBuildersDeleteFiles = processBuildersDeleteFiles(workingDir, lcmsFilePaths);
            processBuilders.addAll(processBuildersDeleteFiles);
        }
        
        
        
        LogUtils.println(console, String.format("Will execute %d commands:", processBuilders.size()));
        for (final ProcessBuilder pb : processBuilders) {
            StringBuilder sb = new StringBuilder();
            List<String> command = pb.command();
            for (String commandPart : command)
                sb.append(commandPart).append(" ");
            LogUtils.println(console, sb.toString());
        }
        LogUtils.println(console, "~~~~~~~~~~~~~~~~~~~~~~");
        LogUtils.println(console, "");
        LogUtils.println(console, "");
        
//        FileOutputStream fos = null;
//        try {
//            String logFileName = "dia-umpire-gui_" + dateString + ".log";
//                Path logFilePath = Paths.get(workingDir, logFileName);
//                if (Files.exists(logFilePath))
//                    Files.delete(logFilePath);
//            fos = new FileOutputStream(logFilePath.toFile());
//        } catch (FileNotFoundException ex) {
//            Logger.getLogger(UmpireUnargetedDbSearchFrame.class.getName()).log(Level.SEVERE, null, ex);
//        } catch (IOException ex) {
//            Logger.getLogger(UmpireUnargetedDbSearchFrame.class.getName()).log(Level.SEVERE, null, ex);
//        }
//        
//        final OutputStreamWriter pw = new OutputStreamWriter(new BufferedOutputStream(fos), Charset.forName("UTF-8"));
        
        try // create a log file and run everything
        {
            exec = Executors.newFixedThreadPool(1);
            for (final ProcessBuilder pb : processBuilders) {

                pb.directory(Paths.get(workingDir).toFile());

                REHandler reHandler;
                reHandler = new REHandler(new Runnable() {
                    @Override
                    public void run() {
                        Process process = null;
                        try {
                            List<String> command = pb.command();
                            StringBuilder sb = new StringBuilder("Executing command:\n$> ");
                            for (String commandPart : command)
                                sb.append(commandPart).append(" ");
                            String toAppend = sb.toString();
                            LogUtils.println(console, toAppend);
//                            LogUtils.println(pw, toAppend, false);
//                            pw.flush();
                            process = pb.start();
                            //                        int waitFor = process.waitFor();
                            //                        submittedProcesses.add(process);
                            //
                            //                        LogUtils.println(console, String.format("Process waitFor result is: [%d]", waitFor));
                            //
                            toAppend = "Process started";
                            LogUtils.println(console, toAppend);
//                            LogUtils.println(pw, toAppend, false);
//                            pw.flush();

                            InputStream err = process.getErrorStream();
                            InputStream out = process.getInputStream();
                            while (true) {
                                Thread.sleep(200L);
                                int errAvailable = err.available();
                                if (errAvailable > 0) {
                                    byte[] bytes = new byte[errAvailable];
                                    int read = err.read(bytes);
                                    toAppend = new String(bytes);
                                    LogUtils.println(console, toAppend);
//                                    LogUtils.println(pw, toAppend, false);
//                                    pw.flush();
                                }
                                int outAvailable = out.available();
                                if (outAvailable > 0) {
                                    byte[] bytes = new byte[outAvailable];
                                    int read = out.read(bytes);
                                    toAppend = new String(bytes);
                                    LogUtils.println(console, toAppend);
//                                    LogUtils.println(pw, toAppend, false);
//                                    pw.flush();
                                }
                                try {
                                    int exitValue = process.exitValue();
                                    toAppend = String.format("Process finished, exit value: %d\n", exitValue);
                                    LogUtils.println(console, toAppend);
//                                    LogUtils.println(pw, toAppend, false);
//                                    pw.flush();
                                    break;
                                } catch (IllegalThreadStateException ignore) {
                                    // this error is thrown by process.exitValue() if the underlying process has not yet finished
                                    //LogUtils.println(console, String.format("IllegalThreadStateException: \n", ignore.getMessage()));
                                }
                            }

                        } catch (IOException ex) {
                            String toAppend = String.format("IOException: Error in process,\n%s", ex.getMessage());
                            LogUtils.println(console, toAppend);
//                            LogUtils.println(pw, toAppend, false);
//                            try {
//                                pw.flush();
//                            } catch (IOException ex1) {
//                                Logger.getLogger(UmpireUnargetedDbSearchFrame.class.getName()).log(Level.SEVERE, null, ex1);
//                            }
                        } catch (InterruptedException ex) {
                            if (process != null) {
                                process.destroy();
                            }
                            String toAppend = String.format("InterruptedException: Error in process,\n%s", ex.getMessage());
                            LogUtils.println(console, toAppend);
//                            LogUtils.println(pw, toAppend, false);
//                            try {
//                                pw.flush();
//                            } catch (IOException ex1) {
//                                Logger.getLogger(UmpireUnargetedDbSearchFrame.class.getName()).log(Level.SEVERE, null, ex1);
//                            }
                        } 
                    }
                }, console, System.err);
                exec.submit(reHandler);
                
                
                if (OsUtils.isWindows()) {
                    // On windows try to schedule copied mzXML file deletion
                    REHandler deleteTask = new REHandler(new Runnable() {
                        @Override
                        public void run() {
                            List<Path> copiedFiles = getLcmsFilePathsInWorkdir(Paths.get(workingDir));
                            for (Path copiedFile : copiedFiles) {
                                copiedFile.toFile().deleteOnExit();
                            }
                        }
                    }, console, System.err);
                    exec.submit(deleteTask);
                }
            }
        } finally {
//            if (pw != null)
//                try {
//                    pw.close();
//            } catch (IOException ex) {
//                Logger.getLogger(UmpireUnargetedDbSearchFrame.class.getName()).log(Level.SEVERE, null, ex);
//            }
        }
        
        
        
        final JButton btnStartPtr = btnRun;
        final JButton btnStopPtr = btnStop;
        REHandler finalizerTask = new REHandler(new Runnable() {
            @Override
            public void run() {
                submittedProcesses.clear();
                btnRun.setEnabled(true);
                btnStop.setEnabled(false);
                LogUtils.println(console, String.format("========================="));
                LogUtils.println(console, String.format("==="));
                LogUtils.println(console, String.format("===        Done"));
                LogUtils.println(console, String.format("==="));
                LogUtils.println(console, String.format("========================="));
            }
        }, console, System.err);
        
        exec.submit(finalizerTask);
        
        exec.shutdown();
    }//GEN-LAST:event_btnRunActionPerformed

    /**
     * Get the name of the file less the provided suffix.
     * @param path the filename component will be taken
     * @param suffix lowercase suffix
     * @return filename less suffix
     */
    private String getFileNameLessSuffix(Path path, String suffix) {
        String name = path.getFileName().toString();
        int indexOf = name.toLowerCase().indexOf(suffix);
        return indexOf >= 0 ? name.substring(0, indexOf) : name;
    }
    
    /**
     * @param path Path to lcms file
     * @return file paths resolved using lcmsFilePath's parent
     */
    private UmpireGarbageFiles getUmpireSeGarbageFiles(Path lcmsFilePath) {
        UmpireGarbageFiles umpireGarbageFiles = new UmpireGarbageFiles();
        String fileNameLessSuffix = getFileNameLessSuffix(lcmsFilePath, ".mzxml");
        Path fileOriginDir = lcmsFilePath.getParent();
        
        for (String fileToMove : UmpireGarbageFiles.filesToMove) {
            umpireGarbageFiles.toMove.add(fileOriginDir.resolve(fileToMove).toString());
        }
        
        for (String suffix : UmpireGarbageFiles.fileNameSuffixesToMove) {
            String filenameToMove = fileNameLessSuffix + suffix;
            String file = fileOriginDir.resolve(filenameToMove).toString();
            umpireGarbageFiles.toMove.add(file);
        }
        return umpireGarbageFiles;
    }
    
    private static class UmpireGarbageFiles {
        static List<String> filesToMove = Arrays.asList("diaumpire_se.log");
        static List<String> fileNameSuffixesToMove = Arrays.asList(
                "_Peak", ".DIAWindowsFS", ".RTidxFS", 
                ".ScanClusterMapping_Q1", ".ScanClusterMapping_Q2", ".ScanClusterMapping_Q3",
                ".ScanidxFS", ".ScanPosFS", ".ScanRTFS", "_diasetting.ser", "_params.ser",
                "_Q1.mgf", "_Q2.mgf", "_Q3.mgf");
        List<String> toMove = new ArrayList<>();
    }
    
    private List<ProcessBuilder> processBuildersCopyFiles(String programsDir, String workingDir, List<String> lcmsFilePaths) {
        List<ProcessBuilder> processBuilders = new LinkedList<>();
        
        URI currentJarUri = OsUtils.getCurrentJarPath();
        String currentJarPath = Paths.get(currentJarUri).toAbsolutePath().toString();
        
        for (String lcmsFilePath : lcmsFilePaths) {
            List<String> commands = new ArrayList<>();
            commands.add("java");
            commands.add("-cp");
            commands.add(currentJarPath);
            commands.add("dia.umpire.util.FileCopy");
            commands.add(lcmsFilePath);
            Path copyTo = Paths.get(workingDir, Paths.get(lcmsFilePath).getFileName().toString());
            commands.add(copyTo.toString());
            ProcessBuilder pb = new ProcessBuilder(commands);
            processBuilders.add(pb);
        }
        return processBuilders;
    }
    
    private List<ProcessBuilder> processBuildersDeleteFiles(String workingDir, List<String> lcmsFilePaths) {
        List<ProcessBuilder> processBuilders = new LinkedList<>();
        
        URI currentJarUri = OsUtils.getCurrentJarPath();
        String currentJarPath = Paths.get(currentJarUri).toAbsolutePath().toString();
        
        for (String lcmsFilePath : lcmsFilePaths) {
            List<String> commands = new ArrayList<>();
            commands.add("java");
            commands.add("-cp");
            commands.add(currentJarPath);
            commands.add("dia.umpire.util.FileDelete");
            Path copyTo = Paths.get(workingDir, Paths.get(lcmsFilePath).getFileName().toString());
            commands.add(copyTo.toString());
            ProcessBuilder pb = new ProcessBuilder(commands);
            processBuilders.add(pb);
        }
        return processBuilders;
    }
    
    private String getBinJava(String programsDir) {
        String binJava = "java";
        binJava = testBinaryPath(binJava, programsDir);
        if (binJava != null)
            return binJava;
        JOptionPane.showMessageDialog(this, "Java could not be found.\n"
                + "please make sure you have it installed \n"
                + "and that java.exe can be found on PATH", "Error", JOptionPane.ERROR_MESSAGE);
        return null;
    }
    
    private List<ProcessBuilder> processBuildersUmpire(String programsDir, String workingDir, List<String> lcmsFilePaths, String dateStr) {
        List<ProcessBuilder> processBuilders = new LinkedList<>();
        if (chkRunUmpire.isSelected()) {
            
            String binJava = getBinJava(programsDir);
            
            if (binJava == null)
                return null;
            
            String binUmpire = txtBinUmpire.getText();
            if (binUmpire.isEmpty()) {
                JOptionPane.showMessageDialog(this, "[DIA Umpire SE tab]\nDIA Umpire SE binary can't be an empty string", "Error", JOptionPane.ERROR_MESSAGE);
                return null;
            }
            binUmpire = testFilePath(binUmpire, programsDir);
            if (binUmpire == null) {
                JOptionPane.showMessageDialog(this, "[DIA Umpire SE tab]\nCould not locate DIA-Umpire SE jar", "Error", JOptionPane.ERROR_MESSAGE);
                return null;
            }
            
            String binMsconvert = txtBinMsconvert.getText();
            if (binMsconvert.isEmpty()) {
                JOptionPane.showMessageDialog(this, "[DIA Umpire SE tab]\nMSConvert binary can't be an empty string", "Error", JOptionPane.ERROR_MESSAGE);
                return null;
            }
            binMsconvert = testBinaryPath(binMsconvert, programsDir);
            if (binMsconvert == null) {
                JOptionPane.showMessageDialog(this, "MSConvert binary could not be found \n"
                        + "on PATH or in the working directory", "Error", JOptionPane.ERROR_MESSAGE);
                return null;
            }
            
            
            try {
                // Running Umpire
                UmpireParams collectedUmpireParams = collectUmpireParams();
                
                // writing umpire params file
                String umpireParamsFileName = UmpireParams.FILE_BASE_NAME + "_" + dateStr + "." + UmpireParams.FILE_BASE_EXT;
                Path umpireParamsFilePath = Paths.get(workingDir, umpireParamsFileName);
                FileOutputStream fos = new FileOutputStream(umpireParamsFilePath.toFile());
                PropertiesUtils.writePropertiesContent(collectedUmpireParams, fos);
                
                // run umpire for each file
                Object value = spinnerRam.getModel().getValue();
                int ram = (Integer)spinnerRam.getModel().getValue();
                if (ram < MIN_RAM)
                    ram = MIN_RAM;
                
                List<String> createdMgfFiles = new ArrayList<>();
                List<String> createdMzXmlFiles = new ArrayList<>();
                Path wdPath = Paths.get(workingDir).toAbsolutePath();
                List<Path> lcmsFileSymlinks = getLcmsFilePathsInWorkdir(wdPath);
                for (Path lcmsSymlink : lcmsFileSymlinks) {
                    Path curMzxmlPath = lcmsSymlink;
                    Path curMzxmlFileName = curMzxmlPath.getFileName();
                    Path curMzxmlFileDir = curMzxmlPath.getParent();
                    
                    // umpire
                    //  java -jar -Xmx8G DIA_Umpire_SE.jar mzMXL_file diaumpire_se.params
                    List<String> commands = new ArrayList<>();
                    commands.add("java");
                    //commands.add("-d64");
                    commands.add("-jar");
                    StringBuilder sb = new StringBuilder().append("-Xmx").append(ram).append("m");
                    commands.add(sb.toString());
                    commands.add(binUmpire);
                    commands.add(curMzxmlPath.toString());
                    commands.add(umpireParamsFilePath.toString());
                    
                    ProcessBuilder pb = new ProcessBuilder(commands);
                    processBuilders.add(pb);
                    
                    
                    // check if the working dir is the dir where the mzXML file was
                    // if it is, then don't do anything, if it is not, then copy
                    // UmpireSE outputs to the working directory
                    // and also create symlinks to the original files
                    
                    if (!wdPath.equals(curMzxmlFileDir)) {
                        // find the curernt gui JAR location
                        URI currentJarUri = OsUtils.getCurrentJarPath();
                        String currentJarPath = Paths.get(currentJarUri).toAbsolutePath().toString();
                        
                        
                        // working dir is different from mzXML file location, need to move output
                        UmpireGarbageFiles umpireGarbageFiles = getUmpireSeGarbageFiles(curMzxmlPath);
                        
                        for (String path : umpireGarbageFiles.toMove) {
                            List<String> commandsFileMove = new ArrayList<>();
                            commandsFileMove.add("java");
                            commandsFileMove.add("-cp");
                            commandsFileMove.add(currentJarPath);
                            commandsFileMove.add("dia.umpire.util.FileMove");
                            String origin = curMzxmlFileDir.resolve(Paths.get(path).getFileName()).toString();
                            String destination = wdPath.resolve(Paths.get(path).getFileName()).toString();
                            commandsFileMove.add(origin);
                            commandsFileMove.add(destination);
                            ProcessBuilder pbFileMove = new ProcessBuilder(commandsFileMove);
                            processBuilders.add(pbFileMove);
                        }
                        
//                        // creating symlink
//                        List<String> commandsSymlink = new ArrayList<>();
//                        commandsSymlink.add("java");
//                        commandsSymlink.add("-cp");
//                        commandsSymlink.add(currentJarPath);
//                        commandsSymlink.add("dia.umpire.util.FileSymlink");
//                        String origin = curMzxmlPath.toString();
//                        String symlink = wdPath.resolve(curMzxmlFileName).toString();
//                        commandsSymlink.add(origin);
//                        commandsSymlink.add(symlink);
//                        ProcessBuilder pbSymlink = new ProcessBuilder(commandsSymlink);
//                        processBuilders.add(pbSymlink);
                    }
                    
                    
                    // msconvert
                    for (int i = 1; i <= 3; i++) {
                        List<String> commandsMsconvert = new ArrayList<>();
                        commandsMsconvert.add(binMsconvert);
                        commandsMsconvert.add("--verbose");
                        commandsMsconvert.add("--32");
                        commandsMsconvert.add("--zlib");
                        commandsMsconvert.add("--mzXML");
                        commandsMsconvert.add("--outdir");
                        commandsMsconvert.add(workingDir);

                        String s = curMzxmlFileName.toString();
                        int indexOf = s.toLowerCase().indexOf(".mzxml");
                        String baseName = curMzxmlFileName.toString().substring(0, indexOf);
                        Path createdMgf = Paths.get(workingDir, baseName+"_Q"+i+".mgf");
                        Path createdMzXml = Paths.get(workingDir, baseName+"_Q"+i+".mzxml");
                        commandsMsconvert.add(createdMgf.toString());
                        
                        ProcessBuilder pbMsconv = new ProcessBuilder(commandsMsconvert);
                        processBuilders.add(pbMsconv);
                        createdMgfFiles.add(createdMgf.toString());
                        createdMzXmlFiles.add(createdMzXml.toString());
                    }
                }
                
            } catch (ParsingException ex) {
                JOptionPane.showMessageDialog(this, "Error collecting user variables for Umpire SE.\n",
                        "Error", JOptionPane.ERROR_MESSAGE);
                return null;
            } catch (FileNotFoundException | FileWritingException ex) {
                JOptionPane.showMessageDialog(this, "Error writing Umpire SE parameters file to working dir.\n",
                        "Error", JOptionPane.ERROR_MESSAGE);
                return null;
            }
        }
        return processBuilders;
    }
    
    private String getUmpireQuantFastaPath() {
        String fastaPath = txtUmpireQuantSeqDb.getText().trim();
        if (fastaPath.isEmpty()) {
            fastaPath = txtProteinProphetSeqDb.getText().trim();
            if (fastaPath.isEmpty()) {
                fastaPath = txtPeptideProphetSeqDb.getText().trim();
                if (fastaPath.isEmpty()) {
                    fastaPath = txtCometSeqDb.getText().trim();
                    if (fastaPath.isEmpty()) {
                        return null;
                    }
                }       
            }
        }
        return fastaPath.isEmpty() ? null : fastaPath;
    }
    
    private Path getCombinedProtFilePath(String workingDir) {
        String combinedProtFile = txtProteinProphetOutputFile.getText().trim();
        if (combinedProtFile.isEmpty()) {
            JOptionPane.showMessageDialog(this, String.format("Please specify ProteinProphet output path on ProteinProphet tab.\n"
                    + "This is needed even if you're not running ProteinProphet right now.\n"
                    + "In which case check the box to run it, add the filename and uncheck the filebox.\n"
                    + "Sorry for the inconvenience."),
                    "Errors", JOptionPane.ERROR_MESSAGE);
            return null;
        } else {
            Path combinedProtFileFullPath = Paths.get(workingDir, combinedProtFile).toAbsolutePath();
            // can't check if file exists beforehand
//            if (!Files.exists(combinedProtFileFullPath)) {
//                JOptionPane.showMessageDialog(this, String.format("Could not find combined protxml file (for Umpire Quant).\n"
//                        + "Location: %s", combinedProtFileFullPath.toString()),
//                    "Errors", JOptionPane.ERROR_MESSAGE);
//                return null;
//            }
            return combinedProtFileFullPath;
        }
    }
    
    private List<ProcessBuilder> processBuildersUmpireQuant(String programsDir, String workingDir, List<String> lcmsFilePaths, String dateStr) {
        List<ProcessBuilder> processBuilders = new LinkedList<>();
        if (chkRunUmpireQuant.isSelected()) {
            
            String binJava = "java";
            binJava = testBinaryPath(binJava, programsDir);
            if (binJava == null) {
                JOptionPane.showMessageDialog(this, "Java could not be found.\n"
                        + "please make sure you have it installed \n"
                        + "and that java.exe can be found on PATH", "Error", JOptionPane.ERROR_MESSAGE);
                return null;
            }
            
            
            String jarUmpireQuant = txtBinUmpireQuant.getText().trim();
            if (jarUmpireQuant.isEmpty()) {
                JOptionPane.showMessageDialog(this, "[DIA Umpire Quant tab]\nDIA Umpire Quant jar can't be empty string", "Error", JOptionPane.ERROR_MESSAGE);
                return null;
            }
            jarUmpireQuant = testFilePath(jarUmpireQuant, programsDir);
            if (jarUmpireQuant == null) {
                JOptionPane.showMessageDialog(this, "[DIA Umpire Quant tab]\nCould not locate DIA-Umpire Quant jar", "Error", JOptionPane.ERROR_MESSAGE);
                return null;
            }
            
            String fastaPath = getUmpireQuantFastaPath();
            if (fastaPath == null) {
                JOptionPane.showMessageDialog(this, "Fasta file (DIA-Umpire Quant) path can't be empty",
                                "Warning", JOptionPane.WARNING_MESSAGE);
                return null;
            }
            
            String fastaPathOrig = new String(fastaPath);
            fastaPath = testFilePath(fastaPath, workingDir);
            if (fastaPath == null) {
                JOptionPane.showMessageDialog(this, String.format("Could not find fasta file (DIA-Umpire Quant) at:\n%s", fastaPathOrig),
                        "Errors", JOptionPane.ERROR_MESSAGE);
                return null;
            }
            
            
            Path combinedProtFilePath = getCombinedProtFilePath(workingDir);
            if (combinedProtFilePath == null) {
                return null; // all popus are already shown by getCombinedProtFilePath()
            }
            
            
            
            try {
                // Running Umpire Quant
                UmpireQuantParams collectedParams = collectUmpireQuantParams();
                Properties props = collectedParams.getProps();
                
                
                // writing umpire params file
                String paramsFileName = UmpireQuantParams.FILE_BASE_NAME + "_" + dateStr + "." + UmpireQuantParams.FILE_BASE_EXT;
                Path paramsFilePath = Paths.get(workingDir, paramsFileName);
                FileOutputStream fos = new FileOutputStream(paramsFilePath.toFile());
                PropertiesUtils.writePropertiesContent(collectedParams, fos);
                
                // run umpire for each file
                Object value = spinnerRam.getModel().getValue();
                int ram = (Integer)spinnerRam.getModel().getValue();
                if (ram < MIN_RAM)
                    ram = MIN_RAM;
                
                // java -jar -Xmx22732m ~/dia/DIA-Umpire/DIA_Umpire_Quant.jar ~/workdir/DIA_Umpire_Quant/diaumpire_quant_params.txt
                List<String> commands = new ArrayList<>();
                commands.add("java");
                commands.add("-jar");
                StringBuilder sb = new StringBuilder().append("-Xmx").append(ram).append("m");
                commands.add(sb.toString());
                commands.add(jarUmpireQuant);
                commands.add(paramsFilePath.toString());

                ProcessBuilder pb = new ProcessBuilder(commands);
                processBuilders.add(pb);
                
            } catch (ParsingException ex) {
                JOptionPane.showMessageDialog(this, "Error collecting user variables for Umpire Quant.\n",
                        "Error", JOptionPane.ERROR_MESSAGE);
                return null;
            } catch (FileNotFoundException | FileWritingException ex) {
                JOptionPane.showMessageDialog(this, "Error writing Umpire Quant parameters file to working dir.\n",
                        "Error", JOptionPane.ERROR_MESSAGE);
                return null;
            }
        }
        return processBuilders;
    }
    
    private boolean isPhilosopherBin(String binPathToCheck) {
        Pattern isPhilosopherRegex = Pattern.compile("philosopher", Pattern.CASE_INSENSITIVE);
        Matcher matcher = isPhilosopherRegex.matcher(binPathToCheck);
        return matcher.find();
    }
    
    private List<ProcessBuilder> processBuildersComet(String programsDir, String workingDir, List<String> lcmsFilePaths, String dateStr) {
        List<ProcessBuilder> processBuilders = new LinkedList<>();
        if (chkRunCometSearch.isSelected()) {
            try {
                CometParams collectedCometParams = collectCometParams();
                
                String bin = txtBinComet.getText().trim();
                if (bin.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Binary for running Comet can not be an empty string.\n",
                        "Error", JOptionPane.ERROR_MESSAGE);
                    return null;
                }
                bin = testBinaryPath(bin, programsDir);
                if (bin == null) {
                    JOptionPane.showMessageDialog(this, "Binary for running Comet not found or could not be run.\n"
                            + "Neither on PATH, nor in the working directory",
                        "Error", JOptionPane.ERROR_MESSAGE);
                    return null;
                }
                
                String fastaPath = txtCometSeqDb.getText().trim();
                if (fastaPath.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Fasta file (Comet) path can't be empty",
                        "Warning", JOptionPane.WARNING_MESSAGE);
                    return null;
                }
                String fastaPathOrig = new String(fastaPath);
                fastaPath = testFilePath(fastaPath, workingDir);
                if (fastaPath == null) {
                    JOptionPane.showMessageDialog(this, String.format("Could not find fasta file (Comet) at:\n%s", fastaPathOrig),
                            "Errors", JOptionPane.ERROR_MESSAGE);
                    return null;
                }
                
                    

                // writing Comet params file
                String cometParamsFileName = CometParams.FILE_BASE_NAME + "_" + dateStr + "." + CometParams.FILE_BASE_EXT;
                Path cometParamsFilePath = Paths.get(workingDir, cometParamsFileName);
                FileOutputStream fos = new FileOutputStream(cometParamsFilePath.toFile());
                PropertiesUtils.writePropertiesContent(collectedCometParams, fos);
                
                // run comet for each file
                Object value = spinnerRam.getModel().getValue();
                int ram = (Integer)spinnerRam.getModel().getValue();
                if (ram < 1)
                    ram = 1;
                
                List<String> createdMzXmlFiles = new ArrayList<>();
                boolean isPhilosopher = isPhilosopherBin(bin);
                for (String filePath : lcmsFilePaths) {
                    // Comet
                    for (int i = 1; i <= 3; i++) {
                        List<String> commands = new ArrayList<>();
                        commands.add(bin);
                        if (isPhilosopher)
                            commands.add(Philosopher.CMD_COMET);
                        
                        String cmdOpts = txtCometCmdLineOpts.getText().trim();
                        if (!cmdOpts.isEmpty()) {
                            String[] opts = cmdOpts.split("\\s+");
                            for (String opt : opts) {
                                if (!opt.isEmpty()) {
                                    if (!isPhilosopher && opt.equals(Philosopher.CMD_COMET)) // for non-philosopher skip this option
                                        continue;
                                    commands.add(opt);
                                }
                            }
                        }
                        
                        commands.add("--param");
                        commands.add(cometParamsFilePath.toString());

                        Path curMzXMl = Paths.get(filePath);
                        Path mzXmlFileName = curMzXMl.getFileName();
                    
                        String s = mzXmlFileName.toString();
                        int indexOf = s.toLowerCase().indexOf(".mzxml");
                        String baseName = mzXmlFileName.toString().substring(0, indexOf);
                        Path createdMzXml = Paths.get(workingDir, baseName+"_Q"+i+".mzXML");
                        commands.add(createdMzXml.toString());
                        ProcessBuilder pb = new ProcessBuilder(commands);
                        Map<String, String> env = pb.environment();
                        // set environment 
                        String ENV_WEBSERVER_ROOT = "WEBSERVER_ROOT";
                        String webroot = env.get(ENV_WEBSERVER_ROOT);
                        if (webroot == null) {
                            env.put(ENV_WEBSERVER_ROOT, "fake-WEBSERVER_ROOT-value");
                        }
                        processBuilders.add(pb);
                        createdMzXmlFiles.add(createdMzXml.toString());
                    }
                }
                
            } catch (ParsingException ex) {
                JOptionPane.showMessageDialog(this, "Error collecting user variables for Comet Search.\n",
                        "Error", JOptionPane.ERROR_MESSAGE);
                return null;
            } catch (FileNotFoundException | FileWritingException ex) {
                JOptionPane.showMessageDialog(this, "Error collecting user variables for Comet Search.\n",
                        "Error", JOptionPane.ERROR_MESSAGE);
                return null;
            }
        }
        return processBuilders;
    }
    
    /**
     * Creates the ProcessBuilders for running PeptideProphet.
     * @param workingDir
     * @param lcmsFilePaths
     * @return null in case of errors, or a list of process builders.
     */
    private List<ProcessBuilder> processBuildersPeptideProphet(String programsDir, String workingDir, List<String> lcmsFilePaths) {
        List<ProcessBuilder> processBuilders = new LinkedList<>();
        if (chkRunPeptideProphet.isSelected()) {
            String bin = txtBinPeptideProphet.getText().trim();
            if (bin.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Philosopher (PeptideProphet) binary can not be an empty string.\n",
                    "Error", JOptionPane.ERROR_MESSAGE);
                return null;
            }
            bin = testBinaryPath(bin, programsDir);
            if (bin == null) {
                JOptionPane.showMessageDialog(this, "Philosopher (PeptideProphet) binary not found.\n"
                        + "Neither on PATH, nor in the working directory",
                    "Error", JOptionPane.ERROR_MESSAGE);
                return null;
            }


            String fastaPath = txtPeptideProphetSeqDb.getText().trim();
            if (fastaPath.isEmpty()) {
                fastaPath = txtCometSeqDb.getText().trim();
                if (fastaPath.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Fasta file (PeptideProphet) path can't be empty",
                        "Warning", JOptionPane.WARNING_MESSAGE);
                    return null;
                }
            }
            String fastaPathOrig = new String(fastaPath);
            fastaPath = testFilePath(fastaPath, workingDir);
            if (fastaPath == null) {
                JOptionPane.showMessageDialog(this, String.format("Could not find fasta file (PeptideProphet) at:\n%s", fastaPathOrig),
                        "Errors", JOptionPane.ERROR_MESSAGE);
                return null;
            }

            PeptideProphetParams peptideProphetParams = new PeptideProphetParams();
            peptideProphetParams.setCmdLineParams(txtPeptideProphetCmdLineOptions.getText().trim());


            List<String> createdPepXmlFiles = new ArrayList<>();
            String philosopherPeptideprophetCmd = "peptideprophet";
            boolean isPhilosopher = isPhilosopherBin(bin);
            for (String filePath : lcmsFilePaths) {
                // Comet
                for (int i = 1; i <= 3; i++) {
                    List<String> commands = new ArrayList<>();
                    commands.add(bin);
                    if (isPhilosopher) // for philosopher we always add the correct command
                        commands.add(Philosopher.CMD_PEPTIDE_PROPHET);
                    
                    if (!peptideProphetParams.getCmdLineParams().isEmpty()) {
                        String cmdOpts = peptideProphetParams.getCmdLineParams();
//                        List<String> opts = StringUtils.split("\\s+", cmdOpts);
                        List<String> opts = StringUtils.splitCommandLine(cmdOpts);
                        for (String opt : opts) {
                            if (!opt.isEmpty()) {
                                if (opt.equals(Philosopher.CMD_PEPTIDE_PROPHET))
                                    continue;
                                commands.add(opt);
                            }
                        }
                    }
                    commands.add("--database");
                    commands.add(fastaPath);

                    Path curMzXMl = Paths.get(filePath);
                    Path mzXmlFileName = curMzXMl.getFileName();

                    String s = mzXmlFileName.toString();
                    int indexOf = s.toLowerCase().indexOf(".mzxml");
                    String baseName = mzXmlFileName.toString().substring(0, indexOf);
                    Path createdPepXml = Paths.get(workingDir, baseName+"_Q"+i+".pep.xml");
                    commands.add(createdPepXml.toString());
                    ProcessBuilder pb = new ProcessBuilder(commands);
                    Map<String, String> env = pb.environment();
                    // set environment 
                    String ENV_WEBSERVER_ROOT = "WEBSERVER_ROOT";
                    String webroot = env.get(ENV_WEBSERVER_ROOT);
                    if (webroot == null) {
                        env.put(ENV_WEBSERVER_ROOT, "fake-WEBSERVER_ROOT-value");
                    }
                    processBuilders.add(pb);
                    createdPepXmlFiles.add(createdPepXml.toString());
                }
            }
        }
        return processBuilders;
    }
    
    /**
     * Creates the processBuilders for running ProteinProphet.
     * @return null in case of error, empty list if nothing needs to be added.
     */
    private List<ProcessBuilder> processBuildersProteinProphet(String programsDir, String workingDir, List<String> lcmsFilePaths) {
        if (chkRunProteinProphet.isSelected()) {
            String bin = txtBinProteinProphet.getText().trim();
            if (bin.isEmpty()) {
                JOptionPane.showMessageDialog(this, "ProteinProphet binary can not be an empty string.\n",
                    "Error", JOptionPane.ERROR_MESSAGE);
                return null;
            }
            bin = testBinaryPath(bin, programsDir);
            if (bin == null) {
                JOptionPane.showMessageDialog(this, "ProteinProphet binary not found or could not be launched.\n"
                        + "Neither on PATH, nor in the working directory",
                    "Error", JOptionPane.ERROR_MESSAGE);
                return null;
            }
            
            String outputFileName = txtProteinProphetOutputFile.getText().trim();
            if (outputFileName.isEmpty()) {
                JOptionPane.showMessageDialog(this, "ProteinProphet output file name can not be an empty string.\n",
                    "Error", JOptionPane.ERROR_MESSAGE);
                return null;
            } else if (!outputFileName.toLowerCase().endsWith(".prot.xml")) {
                JOptionPane.showMessageDialog(this, "ProteinProphet output file name must end with '.prot.xml'.\n",
                    "Error", JOptionPane.ERROR_MESSAGE);
                return null;
            } else {
                int index = outputFileName.trim().toLowerCase().indexOf(".prot.xml");
                if (index <= 0) {
                    JOptionPane.showMessageDialog(this, "ProteinProphet output file name must have content before '.prot.xml'.\n",
                        "Error", JOptionPane.ERROR_MESSAGE);
                    return null;
                }
            }

            ProteinProphetParams proteinProphetParams = new ProteinProphetParams();
            proteinProphetParams.setCmdLineParams(txtProteinProphetCmdLineOpts.getText());


            List<String> createdInteractFiles = new ArrayList<>();
            List<String> commands = new ArrayList<>();
            commands.add(bin);
            boolean isPhilosopher = isPhilosopherBin(bin);
            
            
            if (isPhilosopher) {
                commands.add(Philosopher.CMD_PROTEIN_PROPHET);
                commands.add("--output");
                commands.add(txtProteinProphetOutputFile.getText());
                
                // for Philosopher command line flags go before files
                String cmdLineOpts = proteinProphetParams.getCmdLineParams().trim();
                if (!cmdLineOpts.isEmpty()) {
                    List<String> opts = StringUtils.splitCommandLine(cmdLineOpts);
                    commands.addAll(opts);
                }
                
                if (chkProteinProphetAddInteractPepXmlsSeparately.isSelected()) {
                    commands.add("interact-*.pep.xml");
                } else {
                    for (String filePath : lcmsFilePaths) {
                        for (int i = 1; i <= 3; i++) {
                            Path curMzXMl = Paths.get(filePath);
                            Path mzXmlFileName = curMzXMl.getFileName();
                            String s = mzXmlFileName.toString();
                            int indexOf = s.toLowerCase().indexOf(".mzxml");
                            String baseName = mzXmlFileName.toString().substring(0, indexOf);
                            //Path createdPepXml = Paths.get(curMzXMl.getParent().toString(), "interact-" + baseName + "_Q" + i + ".pep.xml");
                            Path createdPepXml = Paths.get(workingDir, "interact-" + baseName + "_Q" + i + ".pep.xml");
                            commands.add(createdPepXml.toString());
                            createdInteractFiles.add(createdPepXml.toString());
                        }
                    }
                }
            } else {
                for (String filePath : lcmsFilePaths) {
                    for (int i = 1; i <= 3; i++) {
                        Path curMzXMl = Paths.get(filePath);
                        Path mzXmlFileName = curMzXMl.getFileName();
                        String s = mzXmlFileName.toString();
                        int indexOf = s.toLowerCase().indexOf(".mzxml");
                        String baseName = mzXmlFileName.toString().substring(0, indexOf);
                        //Path createdPepXml = Paths.get(curMzXMl.getParent().toString(), "interact-" + baseName + "_Q" + i + ".pep.xml");
                        Path createdPepXml = Paths.get(workingDir, "interact-" + baseName + "_Q" + i + ".pep.xml");
                        commands.add(createdPepXml.toString());
                        createdInteractFiles.add(createdPepXml.toString());
                    }
                }
                
                // output file
                commands.add(txtProteinProphetOutputFile.getText());
                
                // for native ProteinProphet command line flags go in the end
                String cmdLineOpts = proteinProphetParams.getCmdLineParams().trim();
                if (!cmdLineOpts.isEmpty()) {
                    List<String> opts = StringUtils.splitCommandLine(cmdLineOpts);
                    commands.addAll(opts);
                }
            }
            
            
            ProcessBuilder pb = new ProcessBuilder(commands);
            pb.directory(Paths.get(workingDir).toFile());
            Map<String, String> env = pb.environment();
            
            // add this variable so that TPP didn't try to use webserver stuff
            String ENV_XML_ONLY = "XML_ONLY";
            env.put(ENV_XML_ONLY, "1");

            // collect variables from system
            StringBuilder pathEnv = new StringBuilder();
            Set<String> mergedKeys = new HashSet<>();
            Set<String> envKeys = env.keySet();
            for (String key : envKeys) {
                if (key.toLowerCase().equals("path")) {
                    String pathVal = env.get(key);
                    pathVal = pathVal.trim();
                    pathEnv.append(pathVal);
                    if (!pathVal.endsWith(";"))
                        pathEnv.append(";");
                    mergedKeys.add(key);
                }
            }
            for (String key : mergedKeys) {
                env.remove(key);
            }
            
            String ENV_PATH = "PATH";
            Path binPath = Paths.get(bin);
            String binFolder = null;
            if (binPath.isAbsolute()) {
                // the path to the executable was specified as absolute, other needed files must be there as well
                binFolder = binPath.toAbsolutePath().getParent().toString();
            } else if (Files.exists(binPath)) {
                binFolder = binPath.toAbsolutePath().getParent().toString();
            } else {
                binPath = Paths.get(workingDir, bin);
                if (Files.exists(binPath)) {
                    binFolder = binPath.toAbsolutePath().getParent().toString();
                }
            }
            if (binFolder != null) {
                pathEnv.append(";").append(binFolder);
            }
            String pathEnvValue = pathEnv.toString();
            env.put(ENV_PATH, pathEnvValue);
            
            // for native TPP we will add some magic variables
//            if (!isPhilosopher) {
//                String ENV_XML_ONLY = "XML_ONLY";
//                env.put(ENV_XML_ONLY, "1");
//
//                String ENV_PATH = "PATH";
//                String envPath = env.get(ENV_PATH);
//                if (envPath == null) {
//                    envPath = "";
//                } else {
//                    envPath = envPath.trim();
//                }
//                StringBuilder sbEnvPath = new StringBuilder(envPath);
//                if (sbEnvPath.length() != 0)
//                    sbEnvPath.append(";");
//                // the ProteinProphet can be either in working directory, or in some directory
//                // that we can get from the executable absolute path
//                String binFolder = null;
//                try {
//                    Path binPath = Paths.get(bin);
//                    if (binPath.isAbsolute()) {
//                        // the path to the executable was specified as absolute, other needed files must be there as well
//                        binFolder = binPath.toAbsolutePath().getParent().toString();
//                    } else if (Files.exists(binPath)) {
//                        binFolder = binPath.toAbsolutePath().getParent().toString();
//                    } else {
//                        binPath = Paths.get(workingDir, bin);
//                        if (Files.exists(binPath)) {
//                            binFolder = binPath.toAbsolutePath().getParent().toString();
//                        }
//                    }                  
//                } catch (Exception ignore) {
//                    // let's hope that everything ProteinProphet needs can be found on system PATH
//                }
//                if (binFolder != null) {
//                    sbEnvPath.append(binFolder);
//                    env.put(ENV_PATH, sbEnvPath.toString());
//                }
//            }
            return Arrays.asList(pb);
        }
        return Collections.emptyList();
    }
    
    private CometParams collectCometParams() throws ParsingException {
        try {
            
            // load deafaults
            CometParams params = null;
            String userSpecifiedFileLoc = txtCometParamsFile.getText();
            if (userSpecifiedFileLoc.isEmpty()) {
                params = CometParams.parseDefault();
            } else {
                params = CometParams.parse(new FileInputStream(userSpecifiedFileLoc));
            }
            
            // now fill in the values from the UI
            DecimalFormat fmt = new DecimalFormat("#.####");
            Properties props = params.getProps();
            String dbPath = txtCometSeqDb.getText();
            if (dbPath.isEmpty())
                throw new ParsingException("Comet search database path can't be empty");
            
            props.setProperty(CometParams.PROP_database_name, dbPath);
            props.setProperty(CometParams.PROP_fragment_bin_offset, fmtfragment_bin_offset.getText());
            props.setProperty(CometParams.PROP_fragment_bin_tol, fmtfragment_bin_tol.getText());
            props.setProperty(CometParams.PROP_peptide_mass_tolerance, fmtpeptide_mass_tolerance.getText());
            props.setProperty(CometParams.PROP_theoretical_fragment_ions, fmttheoretical_fragment_ions.getText());
            //props.setProperty(CometParams.PROP_, fmt.getText());
            
            return params;
        } catch (FileNotFoundException ex) {
            throw new ParsingException("Error collecting user-specified params for Umpire", ex);
        }
    }

    public UmpireParams collectUmpireParams() throws ParsingException {
        try {
            
            // load deafaults
            UmpireParams params = null;
            String userSpecifiedFileLoc = txtUmpireConfigFile.getText().trim();
            if (userSpecifiedFileLoc.isEmpty()) {
                params = UmpireParams.parseDefault();
            } else {
                params = UmpireParams.parse(new FileInputStream(userSpecifiedFileLoc));
            }
            
            // now fill in the values from the UI
            DecimalFormat fmt = new DecimalFormat("#.####");
            Properties props = params.getProps();
            props.setProperty(UmpireParams.PROP_AdjustFragIntensity, Boolean.toString(chkAdjustFragIntensity.isSelected()));
            props.setProperty(UmpireParams.PROP_BoostComplementaryIon, Boolean.toString(chkBoostComplementaryIon.isSelected()));
            props.setProperty(UmpireParams.PROP_CorrThreshold, fmtCorrThreshold.getText());
            props.setProperty(UmpireParams.PROP_DeltaApex, fmtDeltaApex.getText());
            props.setProperty(UmpireParams.PROP_EstimateBG, Boolean.toString(chkEstimateBG.isSelected()));
            props.setProperty(UmpireParams.PROP_MS1PPM, fmtMS1PPM.getText());
            props.setProperty(UmpireParams.PROP_MS2PPM, fmtMS2PPM.getText());
            props.setProperty(UmpireParams.PROP_MS2SN, fmtMS2SN.getText());
            props.setProperty(UmpireParams.PROP_MaxCurveRTRange, fmtMaxCurveRTRange.getText());
            props.setProperty(UmpireParams.PROP_MaxNoPeakCluster, fmtMaxNoPeakCluster.getText());
            props.setProperty(UmpireParams.PROP_MinFrag, fmtMinFrag.getText());
            props.setProperty(UmpireParams.PROP_MinMSIntensity, fmtMinMSIntensity.getText());
            props.setProperty(UmpireParams.PROP_MinMSMSIntensity, fmtMinMSMSIntensity.getText());
            props.setProperty(UmpireParams.PROP_NoMissedScan, fmtNoMissedScan.getText());
            props.setProperty(UmpireParams.PROP_RFmax, fmtRFmax.getText());
            props.setProperty(UmpireParams.PROP_RPmax, fmtRPmax.getText());
            props.setProperty(UmpireParams.PROP_RTOverlap, fmtRTOverlap.getText());
            props.setProperty(UmpireParams.PROP_SN, fmtSN.getText());
            props.setProperty(UmpireParams.PROP_WindowSize, fmtWindowSize.getText());
            Object selectedWindowType = comboWindowType.getSelectedItem();
            props.setProperty(UmpireParams.PROP_WindowType, (String)selectedWindowType);
            //props.setProperty(UmpireParams.PROP_, fmt.getText());
            
            //adding the number of threads
            int numThreads = (Integer)spinnerThreads.getValue();
            if (numThreads == 0)
                numThreads = Runtime.getRuntime().availableProcessors();
            props.setProperty(UmpireParams.PROP_Threads, Integer.toString(numThreads));
            
            return params;
        } catch (FileNotFoundException ex) {
            throw new ParsingException("Error collecting user-specified params for Umpire SE", ex);
        }
    }
    
    private Path getWorkingDir() {
        String wdStr = txtWorkingDir.getText().trim();
        Path path = Paths.get(wdStr).toAbsolutePath();
        return path;
    }
    
    public UmpireQuantParams collectUmpireQuantParams() throws ParsingException {
        try {
            
            // load deafaults
            UmpireQuantParams params = null;
            String userSpecifiedFileLoc = txtUmpireQuantConfig.getText().trim();
            if (userSpecifiedFileLoc.isEmpty()) {
                params = UmpireQuantParams.parseDefault();
            } else {
                params = UmpireQuantParams.parse(new FileInputStream(userSpecifiedFileLoc));
            }
            
            // now fill in the values from the UI
            DecimalFormat fmt = new DecimalFormat("#.####");
            Properties props = params.getProps();
            props.setProperty(UmpireQuantParams.PROP_DecoyPrefix, txtDecoyPrefix.getText());
            props.setProperty(UmpireQuantParams.PROP_InternalLibSearch, Boolean.toString(chkInternalLibSearch.isSelected()));
            props.setProperty(UmpireQuantParams.PROP_PeptideFDR, fmtPeptideFDR.getText());
            props.setProperty(UmpireQuantParams.PROP_ProteinFDR, fmtProteinFDR.getText());
            props.setProperty(UmpireQuantParams.PROP_DataSetLevelPepFDR, Boolean.toString(chkDataSetLevelPepFDR.isSelected()));
            String filterWeightString = (String)comboFilterWeight.getSelectedItem();
            props.setProperty(UmpireQuantParams.PROP_FilterWeight, filterWeightString);
            props.setProperty(UmpireQuantParams.PROP_MinWeight, fmtMinWeight.getText());
            props.setProperty(UmpireQuantParams.PROP_TopNFrag, fmtTopNFrag.getText());
            props.setProperty(UmpireQuantParams.PROP_TopNPep, fmtTopNPep.getText());
            props.setProperty(UmpireQuantParams.PROP_Freq, fmtFreq.getText());
            
            //adding the number of threads
            int numThreads = (Integer)spinnerThreads.getValue();
            if (numThreads == 0)
                numThreads = Runtime.getRuntime().availableProcessors();
            props.setProperty(UmpireQuantParams.PROP_Thread, Integer.toString(numThreads));
            
            // setting Path param to working dir
            String path = getWorkingDir().toString();
            if (!path.endsWith(File.separator))
                path = path + File.separator;
            props.setProperty(UmpireQuantParams.PROP_Path, path);
            
            // setting fasta
            String fastaPath = getUmpireQuantFastaPath();
            props.setProperty(UmpireQuantParams.PROP_Fasta, fastaPath);
            
            // setting combined prot file (the value is taken from ProteinProphet)
            String workdir = txtWorkingDir.getText().trim();
            Path combinedProtFilePath = getCombinedProtFilePath(workdir);
            props.setProperty(UmpireQuantParams.PROP_Combined_Prot, combinedProtFilePath.toString());
            
            return params;
        } catch (FileNotFoundException ex) {
            throw new ParsingException("Error collecting user-specified params for Umpire Quant", ex);
        }
    }

    private String getDefaultTextUmpireSe() {
        String value = ThisAppProps.loadPropFromCache(ThisAppProps.PROP_TEXTFIELD_PATH_UMPIRE_SE);
        if (value != null)
            return value;
        ResourceBundle bundle = ResourceBundle.getBundle("dia/umpire/gui/Bundle"); // NOI18N
        return bundle.getString("default.dia.umpire.se.jar");
    }
    
    private String getDefaultTextUmpireQuant() {
        String value = ThisAppProps.loadPropFromCache(ThisAppProps.PROP_TEXTFIELD_PATH_UMPIRE_QUANT);
        if (value != null)
            return value;
        ResourceBundle bundle = ResourceBundle.getBundle("dia/umpire/gui/Bundle"); // NOI18N
        return bundle.getString("default.dia.umpire.quant.jar");
    }
    
    private String getDefaultTextProgramsDir() {
        String value = ThisAppProps.loadPropFromCache(ThisAppProps.PROP_BINARIES_IN);
        return value == null ? "" : value;
    }

    private String getDefaultTextMsconvert() {
        String value = ThisAppProps.loadPropFromCache(ThisAppProps.PROP_TEXTFIELD_PATH_MSCONVERT);
        if (value != null)
            return value;

        String binaryName;
        ResourceBundle bundle = ResourceBundle.getBundle("dia/umpire/gui/Bundle"); // NOI18N
        if (OsUtils.isWindows()) {
            binaryName = bundle.getString("default.msconvert.win");
        } else {
            binaryName = bundle.getString("default.msconvert.nix");
        }
        String testedBinaryPath = testBinaryPath(binaryName, null);
        if (testedBinaryPath != null && !testedBinaryPath.isEmpty())
            return testedBinaryPath;
        
        
        if (OsUtils.isWindows()) {
            try {
                // on Windows try to find MSConvert in a few predefined locations
                List<String> paths = Arrays.asList(
                        "program files (x64)",
                        "program files"
                );
                String folder = "proteowizard";
                String folder2 = "pwiz";
                final String toSearch = "msconvert.exe";

                final Holder<Path> foundPathHolder = new Holder<>();

                FileVisitor<Path> fileVisitor = new FileVisitor<Path>() {
                    @Override
                    public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {
                        return FileVisitResult.CONTINUE;
                    }

                    @Override
                    public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {
                        if (file.getFileName().toString().toLowerCase().equals(toSearch)) {
                            foundPathHolder.obj = file;
                            return FileVisitResult.TERMINATE;
                        }
                        return FileVisitResult.CONTINUE;
                    }

                    @Override
                    public FileVisitResult visitFileFailed(Path file, IOException exc) throws IOException {
                        return FileVisitResult.CONTINUE;
                    }

                    @Override
                    public FileVisitResult postVisitDirectory(Path dir, IOException exc) throws IOException {
                        return FileVisitResult.CONTINUE;
                    }
                };


                Iterable<Path> rootDirs = FileSystems.getDefault().getRootDirectories();
                for (Path rootDir: rootDirs) {
                    try {
                        DirectoryStream<Path> dirStream = Files.newDirectoryStream(rootDir);
                        for (Path file: dirStream) {
                            for (String path : paths) {
                                if (file.getFileName().toString().toLowerCase().startsWith(path)) {
                                    // search for proteowizard
                                    DirectoryStream<Path> dirStream2 = Files.newDirectoryStream(file);
                                    for (Path file2 : dirStream2) {
                                        String toLowerCase = file2.getFileName().toString().toLowerCase();
                                        if (toLowerCase.startsWith(folder) || toLowerCase.startsWith(folder2)) {
                                            // this might be a proteo wizard folder, recursively search it
                                            Files.walkFileTree(file2, fileVisitor);
                                            if (foundPathHolder.obj != null) {
                                                return foundPathHolder.obj.toAbsolutePath().toString();
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    } catch (IOException ex) {
                        // doesn't matter
                    }
                }
            } catch (Exception e) {
                // we don't care if anything within this block breaks
            }
        }
        return "";
    }
    private class Holder<T> {
        T obj;
    }

    private String getDefaultTextComet() {
        String value = ThisAppProps.loadPropFromCache(ThisAppProps.PROP_TEXTFIELD_PATH_COMET);
        if (value != null)
            return value;
        return getDefaultPhilosopherBinName();
    }

    private String getDefaultTextPeptideProphet() {
        String value = ThisAppProps.loadPropFromCache(ThisAppProps.PROP_TEXTFIELD_PATH_PEPTIDE_PROPHET);
        if (value != null)
            return value;
        return getDefaultPhilosopherBinName();
    }

    private String getDefaultTextProteinProphet() {
        String value = ThisAppProps.loadPropFromCache(ThisAppProps.PROP_TEXTFIELD_PATH_PROTEIN_PROPHET);
        if (value != null)
            return value;
        return getDefaultPhilosopherBinName();
    }

    

    
    public static class REHandler implements Runnable {
        Runnable delegate;
        Appendable[] outs;
        public REHandler (Runnable delegate, Appendable... out) {
            this.delegate = delegate;
            this.outs = out;
        }
        public void run () {
            try {
                delegate.run ();
            } catch (Exception e) {
                //log.error("Something bad happened in a worker thread", e);
                String msg = String.format("Something bad happened in a worker thread:\n%s", e.getMessage());
                for (Appendable out : outs) {
                    LogUtils.println(out, msg);
                }
            }
        }
    }


    private void btnClearConsoleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearConsoleActionPerformed
        console.setText("");
    }//GEN-LAST:event_btnClearConsoleActionPerformed

    private void chkRunUmpireActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkRunUmpireActionPerformed
        boolean selected = chkRunUmpire.isSelected();
        Container[] comps = new Container[] {
            panelUmpireFragGroup,
            panelUmpireSeParams,
            panelUmpireSwathParams,
            panelUmpireBinary
        };
        for (Container c : comps) {
            enableComponents(c, selected);
        }
    }//GEN-LAST:event_chkRunUmpireActionPerformed

    private void chkRunCometSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkRunCometSearchActionPerformed
        boolean selected = chkRunCometSearch.isSelected();
        Container[] comps = new Container[] {
            panelCometBinary,
            panelCometSequence,
            panelCometTolerance
        };
        for (Container c : comps) {
            enableComponents(c, selected);
        }
    }//GEN-LAST:event_chkRunCometSearchActionPerformed

    private void btnSelectWrkingDirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectWrkingDirActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        //FileNameExtensionFilter fileNameExtensionFilter = new FileNameExtensionFilter("FASTA files", "fa", "fasta");
        //fileChooser.setFileFilter(fileNameExtensionFilter);
        fileChooser.setApproveButtonText("Select directory");
        fileChooser.setApproveButtonToolTipText("Select");
        fileChooser.setDialogTitle("Choose working directory");
        fileChooser.setMultiSelectionEnabled(false);
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        setFilechooserPathToCached(fileChooser, ThisAppProps.PROP_LCMS_FILES_IN);
        //setFilechooserPathToCached(fileChooser, ThisAppProps.PROP_PARAMS_FILE_IN);

        if (!txtWorkingDir.getText().isEmpty()) {
            File toFile = Paths.get(txtWorkingDir.getText()).toFile();
            fileChooser.setCurrentDirectory(toFile);
        }

        int showOpenDialog = fileChooser.showOpenDialog(this);
        switch (showOpenDialog) {
            case JFileChooser.APPROVE_OPTION:

                File f = fileChooser.getSelectedFile();
                txtWorkingDir.setText(f.getAbsolutePath());
                saveTextFieldToCache(txtWorkingDir, ThisAppProps.PROP_LCMS_FILES_IN);
                break;
        }
    }//GEN-LAST:event_btnSelectWrkingDirActionPerformed

    private void btnSelectUmpireJarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectUmpireJarActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setApproveButtonText("Select");
        fileChooser.setApproveButtonToolTipText("Select DIA-Umpire SE jar");
        fileChooser.setDialogTitle("Select DIA-Umpire SE jar");
        fileChooser.setMultiSelectionEnabled(false);
        FileNameExtensionFilter fileNameExtensionFilter = new FileNameExtensionFilter("JAR files", "jar");
        fileChooser.setFileFilter(fileNameExtensionFilter);
        
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);

        setFilechooserPathToCached(fileChooser, ThisAppProps.PROP_JAR_IN);

        if (!txtBinUmpire.getText().isEmpty()) {
            File toFile = Paths.get(txtBinUmpire.getText()).toFile();
            fileChooser.setCurrentDirectory(toFile);
        }

        int showOpenDialog = fileChooser.showOpenDialog(this);
        switch (showOpenDialog) {
            case JFileChooser.APPROVE_OPTION:

                File f = fileChooser.getSelectedFile();
                txtBinUmpire.setText(f.getAbsolutePath());
                saveFilechooserPathToCached(f, ThisAppProps.PROP_JAR_IN);
                saveBinUmpireSe();
                break;
        }
    }//GEN-LAST:event_btnSelectUmpireJarActionPerformed

    private void btnSelectMSConvertBinayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectMSConvertBinayActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setApproveButtonText("Select MSConvert binary");
        fileChooser.setApproveButtonToolTipText("Select");
        fileChooser.setDialogTitle("Select MSConvert binary");
        fileChooser.setMultiSelectionEnabled(false);
//        FileNameExtensionFilter fileNameExtensionFilter = new FileNameExtensionFilter("JAR files", "jar");
//        fileChooser.setFileFilter(fileNameExtensionFilter);
        
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);

        setFilechooserPathToCached(fileChooser, ThisAppProps.PROP_BINARIES_IN);

        if (!txtBinMsconvert.getText().isEmpty()) {
            File toFile = Paths.get(txtBinMsconvert.getText()).toFile();
            fileChooser.setCurrentDirectory(toFile);
        }

        int showOpenDialog = fileChooser.showOpenDialog(this);
        switch (showOpenDialog) {
            case JFileChooser.APPROVE_OPTION:

                File f = fileChooser.getSelectedFile();
                txtBinMsconvert.setText(f.getAbsolutePath());
                saveFilechooserPathToCached(f, ThisAppProps.PROP_BINARIES_IN);
                saveBinMsconvert();

                break;
        }
    }//GEN-LAST:event_btnSelectMSConvertBinayActionPerformed

    private void btnSelectPhilosopherBinaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectPhilosopherBinaryActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setApproveButtonText("Select binary");
        fileChooser.setApproveButtonToolTipText("Select Comet or Philosopher binary");
        fileChooser.setDialogTitle("Select binary to use for Comet");
        fileChooser.setMultiSelectionEnabled(false);
        fileChooser.setMultiSelectionEnabled(false);
//        FileNameExtensionFilter fileNameExtensionFilter = new FileNameExtensionFilter("JAR files", "jar");
//        fileChooser.setFileFilter(fileNameExtensionFilter);
        
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);

        setFilechooserPathToCached(fileChooser, ThisAppProps.PROP_BINARIES_IN);

        if (!txtBinComet.getText().isEmpty()) {
            File toFile = Paths.get(txtBinComet.getText()).toFile();
            fileChooser.setCurrentDirectory(toFile);
        }

        int showOpenDialog = fileChooser.showOpenDialog(this);
        switch (showOpenDialog) {
            case JFileChooser.APPROVE_OPTION:

                File f = fileChooser.getSelectedFile();
                txtBinComet.setText(f.getAbsolutePath());
                saveFilechooserPathToCached(f, ThisAppProps.PROP_BINARIES_IN);
                saveBinComet();

                break;
        }
    }//GEN-LAST:event_btnSelectPhilosopherBinaryActionPerformed

    private void btnStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStopActionPerformed
        btnRun.setEnabled(true);
        btnStop.setEnabled(false);
        
        if (exec != null) {
            exec.shutdownNow();
        }
        for (Process p : submittedProcesses) {
            p.destroy();
        }
        submittedProcesses.clear();
    }//GEN-LAST:event_btnStopActionPerformed

    private void chkRunPeptideProphetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkRunPeptideProphetActionPerformed
        boolean selected = chkRunPeptideProphet.isSelected();
        Container[] comps = new Container[] {
            panelPeptideProphetBin,
            panelPeptideProphetOptions
        };
        for (Container c : comps) {
            enableComponents(c, selected);
        }
    }//GEN-LAST:event_chkRunPeptideProphetActionPerformed

    private void btnSelectPeptideProphetBinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectPeptideProphetBinActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setApproveButtonText("Select binary");
        fileChooser.setApproveButtonToolTipText("Select PeptideProphet or Philosopher binary");
        fileChooser.setDialogTitle("Select binary to use for PeptideProphet");
        fileChooser.setMultiSelectionEnabled(false);
//        FileNameExtensionFilter fileNameExtensionFilter = new FileNameExtensionFilter("JAR files", "jar");
//        fileChooser.setFileFilter(fileNameExtensionFilter);
        
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);

        setFilechooserPathToCached(fileChooser, ThisAppProps.PROP_BINARIES_IN);

        if (!txtBinPeptideProphet.getText().isEmpty()) {
            File toFile = Paths.get(txtBinPeptideProphet.getText()).toFile();
            fileChooser.setCurrentDirectory(toFile);
        }

        int showOpenDialog = fileChooser.showOpenDialog(this);
        switch (showOpenDialog) {
            case JFileChooser.APPROVE_OPTION:

                File f = fileChooser.getSelectedFile();
                txtBinPeptideProphet.setText(f.getAbsolutePath());
                saveFilechooserPathToCached(f, ThisAppProps.PROP_BINARIES_IN);
                saveBinPeptideProphet();
                break;
        }
    }//GEN-LAST:event_btnSelectPeptideProphetBinActionPerformed

    private void btnSelectPeptideProphetSeqDbPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectPeptideProphetSeqDbPathActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter fileNameExtensionFilter = new FileNameExtensionFilter("FASTA files", "fa", "fasta");
        fileChooser.setFileFilter(fileNameExtensionFilter);
        fileChooser.setApproveButtonText("Select file");
        fileChooser.setApproveButtonToolTipText("Select");
        fileChooser.setDialogTitle("Choose FASTA file");
        fileChooser.setMultiSelectionEnabled(false);

        setFilechooserPathToCached(fileChooser, ThisAppProps.PROP_PARAMS_FILE_IN);

        if (!txtPeptideProphetSeqDb.getText().isEmpty()) {
            File toFile = Paths.get(txtPeptideProphetSeqDb.getText()).toFile();
            fileChooser.setCurrentDirectory(toFile);
        }

        int showOpenDialog = fileChooser.showOpenDialog(this);
        switch (showOpenDialog) {
            case JFileChooser.APPROVE_OPTION:

                File f = fileChooser.getSelectedFile();
                txtPeptideProphetSeqDb.setText(f.getAbsolutePath());

                break;
        }
    }//GEN-LAST:event_btnSelectPeptideProphetSeqDbPathActionPerformed

    private void btnBinProteinProphetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBinProteinProphetActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setApproveButtonText("Select binary");
        fileChooser.setApproveButtonToolTipText("Select ProteinProphet or Philosopher binary");
        fileChooser.setDialogTitle("Select binary to use for ProteinProphet");
        fileChooser.setMultiSelectionEnabled(false);
//        FileNameExtensionFilter fileNameExtensionFilter = new FileNameExtensionFilter("JAR files", "jar");
//        fileChooser.setFileFilter(fileNameExtensionFilter);
        
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);

        setFilechooserPathToCached(fileChooser, ThisAppProps.PROP_BINARIES_IN);

        if (!txtBinProteinProphet.getText().isEmpty()) {
            File toFile = Paths.get(txtBinProteinProphet.getText()).toFile();
            fileChooser.setCurrentDirectory(toFile);
        }

        int showOpenDialog = fileChooser.showOpenDialog(this);
        switch (showOpenDialog) {
            case JFileChooser.APPROVE_OPTION:

                File f = fileChooser.getSelectedFile();
                txtBinProteinProphet.setText(f.getAbsolutePath());
                saveFilechooserPathToCached(f, ThisAppProps.PROP_BINARIES_IN);
                saveBinProteinProphet();
                break;
        }
    }//GEN-LAST:event_btnBinProteinProphetActionPerformed

    private void chkRunProteinProphetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkRunProteinProphetActionPerformed
        boolean selected = chkRunProteinProphet.isSelected();
        Container[] comps = new Container[] {
            panelProteinProphetBin,
            panelProteinProphetOptions
        };
        for (Container c : comps) {
            enableComponents(c, selected);
        }
    }//GEN-LAST:event_chkRunProteinProphetActionPerformed

    private void txtBinUmpireFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtBinUmpireFocusLost
        saveBinUmpireSe();
    }//GEN-LAST:event_txtBinUmpireFocusLost

    private void txtBinMsconvertFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtBinMsconvertFocusLost
        saveBinMsconvert();
    }//GEN-LAST:event_txtBinMsconvertFocusLost

    private void txtBinCometFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtBinCometFocusLost
        saveBinComet();
    }//GEN-LAST:event_txtBinCometFocusLost

    private void txtBinPeptideProphetFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtBinPeptideProphetFocusLost
        saveBinPeptideProphet();
    }//GEN-LAST:event_txtBinPeptideProphetFocusLost

    private void txtBinProteinProphetFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtBinProteinProphetFocusLost
        saveBinProteinProphet();
    }//GEN-LAST:event_txtBinProteinProphetFocusLost

    private void btnProteinProphetSeqDbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProteinProphetSeqDbActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter fileNameExtensionFilter = new FileNameExtensionFilter("FASTA files", "fa", "fasta");
        fileChooser.setFileFilter(fileNameExtensionFilter);
        fileChooser.setApproveButtonText("Select file");
        fileChooser.setApproveButtonToolTipText("Select");
        fileChooser.setDialogTitle("Choose FASTA file");
        fileChooser.setMultiSelectionEnabled(false);

        setFilechooserPathToCached(fileChooser, ThisAppProps.PROP_PARAMS_FILE_IN);

        if (!txtProteinProphetSeqDb.getText().isEmpty()) {
            File toFile = Paths.get(txtProteinProphetSeqDb.getText()).toFile();
            fileChooser.setCurrentDirectory(toFile);
        }

        int showOpenDialog = fileChooser.showOpenDialog(this);
        switch (showOpenDialog) {
            case JFileChooser.APPROVE_OPTION:

                File f = fileChooser.getSelectedFile();
                txtProteinProphetSeqDb.setText(f.getAbsolutePath());

                break;
        }
    }//GEN-LAST:event_btnProteinProphetSeqDbActionPerformed

    private void btnSelectUmpireQuantJarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectUmpireQuantJarActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setApproveButtonText("Select");
        fileChooser.setApproveButtonToolTipText("Select DIA-Umpire Quant jar");
        fileChooser.setDialogTitle("Select DIA-Umpire Quant jar");
        fileChooser.setMultiSelectionEnabled(false);
        FileNameExtensionFilter fileNameExtensionFilter = new FileNameExtensionFilter("JAR files", "jar");
        fileChooser.setFileFilter(fileNameExtensionFilter);
        
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);

        setFilechooserPathToCached(fileChooser, ThisAppProps.PROP_JAR_IN);

        if (!txtBinUmpire.getText().isEmpty()) {
            File toFile = Paths.get(txtBinUmpire.getText()).toFile();
            fileChooser.setCurrentDirectory(toFile);
        }

        int showOpenDialog = fileChooser.showOpenDialog(this);
        switch (showOpenDialog) {
            case JFileChooser.APPROVE_OPTION:

                File f = fileChooser.getSelectedFile();
                txtBinUmpire.setText(f.getAbsolutePath());
                saveFilechooserPathToCached(f, ThisAppProps.PROP_JAR_IN);
                saveBinUmpireSe();
                break;
        }
    }//GEN-LAST:event_btnSelectUmpireQuantJarActionPerformed

    private void btnSelectUmpireConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectUmpireConfigActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter fileNameExtensionFilter = new FileNameExtensionFilter("Umpire .params files", "params", "txt");
        fileChooser.setFileFilter(fileNameExtensionFilter);
        fileChooser.setApproveButtonText("Select");
        fileChooser.setApproveButtonToolTipText("Load params from this file into the GUI");
        fileChooser.setDialogTitle("Choose Umpire Quant config file");
        fileChooser.setMultiSelectionEnabled(false);

        setFilechooserPathToCached(fileChooser, ThisAppProps.PROP_PARAMS_FILE_IN);

        int openDialog = fileChooser.showOpenDialog(this);
        switch (openDialog) {
            case JFileChooser.APPROVE_OPTION:
                File file = fileChooser.getSelectedFile();
                txtUmpireQuantConfig.setText(Paths.get(file.getAbsolutePath()).toString());
                saveFilechooserPathToCached(file, ThisAppProps.PROP_PARAMS_FILE_IN);
                
                UmpireQuantParams params = null;
                try {
                    params = loadUmpireQuantParamsFile(file);
                } catch (ParsingException ex) {
                    JOptionPane.showMessageDialog(this, "Could not load params file", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                if (params == null) {
                    JOptionPane.showMessageDialog(this, "Could not load params file", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                
                String[] paramNamesToCheck = new String[] {"Path", "Combined_Prot", "Fasta"};
                boolean containsNeededKeys = true;
                for (String key : paramNamesToCheck) {
                    if (!params.getProps().containsKey(key)) {
                        containsNeededKeys = false;
                        break;
                    }
                }
                
                
                if (!containsNeededKeys) {
                    String requiredKeys = StringUtils.join(paramNamesToCheck, ", ");
                    JOptionPane.showMessageDialog(this, String.format("Parameter file loaded, \n"
                            + "but did not contain one of the following keys: \n"
                            + "{%s}", requiredKeys), "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                fillInUmpireQuantParams(params);
                
                break;
        }
    }//GEN-LAST:event_btnSelectUmpireConfigActionPerformed

    private void chkRunUmpireQuantActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkRunUmpireQuantActionPerformed
        boolean selected = chkRunProteinProphet.isSelected();
        Container[] comps = new Container[] {
            panelUmpireQuantBin,
            panelumpireQuantOpts
        };
        for (Container c : comps) {
            enableComponents(c, selected);
        }
    }//GEN-LAST:event_chkRunUmpireQuantActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter fileNameExtensionFilter = new FileNameExtensionFilter("FASTA files", "fa", "fasta");
        fileChooser.setFileFilter(fileNameExtensionFilter);
        fileChooser.setApproveButtonText("Select file");
        fileChooser.setApproveButtonToolTipText("Select");
        fileChooser.setDialogTitle("Choose FASTA file");
        fileChooser.setMultiSelectionEnabled(false);

        setFilechooserPathToCached(fileChooser, ThisAppProps.PROP_PARAMS_FILE_IN);

        if (!txtUmpireQuantSeqDb.getText().isEmpty()) {
            File toFile = Paths.get(txtUmpireQuantSeqDb.getText()).toFile();
            fileChooser.setCurrentDirectory(toFile);
        }

        int showOpenDialog = fileChooser.showOpenDialog(this);
        switch (showOpenDialog) {
            case JFileChooser.APPROVE_OPTION:

                File f = fileChooser.getSelectedFile();
                txtUmpireQuantSeqDb.setText(f.getAbsolutePath());

                break;
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void fmtProteinFDRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fmtProteinFDRActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fmtProteinFDRActionPerformed

    private void fmtPeptideFDRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fmtPeptideFDRActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fmtPeptideFDRActionPerformed

    private void btnBrowseProgramsDirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseProgramsDirActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setApproveButtonText("Select directory");
        fileChooser.setApproveButtonToolTipText("Select directory with Umpire, Philosopher etc");
        fileChooser.setDialogTitle("Select DIA-Umpire and Philosopher directory");
        fileChooser.setMultiSelectionEnabled(false);
//        FileNameExtensionFilter fileNameExtensionFilter = new FileNameExtensionFilter("JAR files", "jar");
//        fileChooser.setFileFilter(fileNameExtensionFilter);
        
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        setFilechooserPathToCached(fileChooser, ThisAppProps.PROP_BINARIES_IN);

        if (!txtProgramsDir.getText().isEmpty()) {
            File toFile = Paths.get(txtProgramsDir.getText()).toFile();
            fileChooser.setCurrentDirectory(toFile);
        }

        int showOpenDialog = fileChooser.showOpenDialog(this);
        switch (showOpenDialog) {
            case JFileChooser.APPROVE_OPTION:

                File f = fileChooser.getSelectedFile();
                txtProgramsDir.setText(f.getAbsolutePath());
                saveFilechooserPathToCached(f, ThisAppProps.PROP_BINARIES_IN);
                saveProgramsDir();
                break;
        }
    }//GEN-LAST:event_btnBrowseProgramsDirActionPerformed

    private void btnUmpireSeCleanupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUmpireSeCleanupActionPerformed
        List<String> paths = getLcmsFilePaths();
        if (paths.isEmpty()) {
            String msg = String.format("No LC/MS files selected in 'Select Raw Files' tab");
            JOptionPane.showMessageDialog(this, msg, "Error", JOptionPane.INFORMATION_MESSAGE);
            resetRunButtons(true);
            return;
        }
        
        List<Path> existingFilesToDelete = new ArrayList<>();
        
        for (String path : paths) {
            UmpireGarbageFiles umpireGarbageFiles = getUmpireSeGarbageFiles(Paths.get(path));
            String garbageFile = "";
            for (int i = 0; i < umpireGarbageFiles.toMove.size(); i++) {
                garbageFile = umpireGarbageFiles.toMove.get(i);
                Path garbagePath = Paths.get(garbageFile);
                if (Files.exists(garbagePath))
                    existingFilesToDelete.add(garbagePath);
            }
        }
        
        if (existingFilesToDelete.isEmpty()) {
            // nothing to delete
            String msg = String.format("Nothing to delete.\n"
                    + "The surroundings of selected files look clean.");
            JOptionPane.showMessageDialog(this, msg, "Nothing to delete", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        
        String msgConfirmDeletion = String.format("You are about to delete %d files.\nAre you sure?", existingFilesToDelete.size());
        int fileDeletionChoice = JOptionPane.showConfirmDialog(this, msgConfirmDeletion, 
                "Deleting files", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (fileDeletionChoice != JOptionPane.OK_OPTION)
            return;
        
        for (Path path : existingFilesToDelete) {
            try {
                if (Files.isDirectory(path)) {
                    FileDelete.deleteFileOrFolder(path);
                } else {
                    Files.deleteIfExists(path);
                }
            } catch (IOException ex) {
                Logger.getLogger(UmpireUnargetedDbSearchFrame.class.getName()).log(Level.SEVERE, null, ex);
                String msg = String.format("Something awful happened while trying to delete file:\n"
                        + "%s", path);
                JOptionPane.showMessageDialog(this, msg, "Error", JOptionPane.ERROR_MESSAGE);
                //return;
            }
        }
        
        
        
    }//GEN-LAST:event_btnUmpireSeCleanupActionPerformed

    private void btnAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAboutActionPerformed

        // for copying style
        JLabel label = new JLabel();
        Font font = label.getFont();
        
        // create some css from the label's font
        StringBuilder style = new StringBuilder("font-family:" + font.getFamily() + ";");
        style.append("font-weight:").append(font.isBold() ? "bold" : "normal").append(";");
        style.append("font-size:").append(font.getSize()).append("pt;");
        
        
        
        JEditorPane ep = new JEditorPane("text/html", "<html><body style=\"" + style + "\">"
                + "<a href=\"http://diaumpire.sourceforge.net/\">DIA-Umpire GUI</a> wrapper<br/>"
                + "By <a href=\"http://batmass.org\">Dmitry Avtonomov</a><br/>"
                + "University of Michigan, 2016<br/>"
                + "<a href=\"http://nesvilab.org/\">Alexey Nesvizhskii lab</a><br/>&nbsp;<br/>&nbsp;"
//                + "DIA-Umpire authors and contributors:<br/>"
//                + "<ul>"
//                + "<li>Chih Chiang Tsou</li>"
//                + "<li>Dmitry Avtonomov</li>"
//                + "<li>Guo Ci Teo</li>"
//                + "<li>Alexey Nesvizhskii</li>"
//                + "</ul>"
                + "<a href=\"http://www.nature.com/nmeth/journal/v12/n3/full/nmeth.3255.html\">Original DIA-Umpire paper link</a><br/>"
                + "Reference: <b>doi:10.1038/nmeth.3255</b>"
                + "</body></html>");

        // handle link events
        ep.addHyperlinkListener(new HyperlinkListener()
        {
            @Override
            public void hyperlinkUpdate(HyperlinkEvent e) {
                if (e.getEventType().equals(HyperlinkEvent.EventType.ACTIVATED)) {
                    try {
                        Desktop.getDesktop().browse(e.getURL().toURI());
                    } catch (URISyntaxException | IOException ex) {
                        Logger.getLogger(UmpireUnargetedDbSearchFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        });
        ep.setEditable(false);
        ep.setBackground(label.getBackground());

        // show
        JOptionPane.showMessageDialog(this, ep, "About", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_btnAboutActionPerformed

    private void saveProgramsDir() {
        saveTextFieldToCache(txtProgramsDir, ThisAppProps.PROP_BINARIES_IN);
    }
    
    private void saveBinUmpireSe() {
        saveTextFieldToCache(txtBinUmpire, ThisAppProps.PROP_TEXTFIELD_PATH_UMPIRE_SE);
    }
    
    private void saveBinMsconvert() {
        saveTextFieldToCache(txtBinMsconvert, ThisAppProps.PROP_TEXTFIELD_PATH_MSCONVERT);
    }
    
    private void saveBinComet() {
        saveTextFieldToCache(txtBinComet, ThisAppProps.PROP_TEXTFIELD_PATH_COMET);
    }
    
    private void saveBinPeptideProphet() {
        saveTextFieldToCache(txtBinProteinProphet, ThisAppProps.PROP_TEXTFIELD_PATH_PROTEIN_PROPHET);
    }
    
    private void saveBinProteinProphet() {
        saveTextFieldToCache(txtBinProteinProphet, ThisAppProps.PROP_TEXTFIELD_PATH_PROTEIN_PROPHET);
    }
    
    private void saveTextFieldToCache(JTextField txt, String propName) {
        String text = txt.getText().trim();
        if (!text.isEmpty()) {
            ThisAppProps.savePropToCache(propName, text);
        }
    }
    
    private boolean loadTextFieldFromCache(JTextField txt, String propName) {
        String cached = ThisAppProps.loadPropFromCache(propName);
        if (cached == null)
            return false;
        txt.setText(cached);
        return true;
    }
    
    private CometParams loadCometParamsFile(File file) throws ParsingException {
        try (FileInputStream fis = new FileInputStream(file)) {
            CometParams params = CometParams.parse(fis);
            return params;
        } catch (FileNotFoundException ex) {
            throw new ParsingException(ex);
        } catch (IOException ex) {
            throw new ParsingException(ex);
        }
    }

    private void fillCometParamFields(CometParams cometParams) throws ParsingException {
        Properties props = cometParams.getProps();

        String databasePath  = props.getProperty(CometParams.PROP_database_name);
        if (databasePath == null) {
            //throw new ParsingException("Could not find database path in the parsed properties");
        } else {
            txtCometSeqDb.setText(databasePath);
        }

        fmtpeptide_mass_tolerance.setText(props.getProperty(CometParams.PROP_peptide_mass_tolerance));
        fmtfragment_bin_tol.setText(props.getProperty(CometParams.PROP_fragment_bin_tol));
        fmtfragment_bin_offset.setText(props.getProperty(CometParams.PROP_fragment_bin_offset));
        fmttheoretical_fragment_ions.setText(props.getProperty(CometParams.PROP_theoretical_fragment_ions));
    }

    private static List<String> splitTrim(String input, String sep) {
        String[] split = input.split(sep);
        List<String> strings = new ArrayList<>(split.length);
        for (int i = 0; i < split.length; i++) {
            split[i] = split[i].trim();
            if (!split[i].isEmpty()) {
                strings.add(split[i]);
            }
        }
        return strings;
    }

    private UmpireParams loadUmpireParamsFile(File file) throws ParsingException {
        try (FileInputStream fis = new FileInputStream(file)) {
            UmpireParams params = UmpireParams.parse(fis);
            return params;
        } catch (FileNotFoundException ex) {
            throw new ParsingException(ex);
        } catch (IOException ex) {
            throw new ParsingException(ex);
        }
    }
    
    private UmpireQuantParams loadUmpireQuantParamsFile(File file) throws ParsingException {
        try (FileInputStream fis = new FileInputStream(file)) {
            UmpireQuantParams params = UmpireQuantParams.parse(fis);
            return params;
        } catch (FileNotFoundException ex) {
            throw new ParsingException(ex);
        } catch (IOException ex) {
            throw new ParsingException(ex);
        }
    }

    private void fillInUmpireParams(UmpireParams params) {
        fmtRPmax.setText(params.getProps().getProperty(UmpireParams.PROP_RPmax));
        fmtRFmax.setText(params.getProps().getProperty(UmpireParams.PROP_RFmax));
        fmtCorrThreshold.setText(params.getProps().getProperty(UmpireParams.PROP_CorrThreshold));
        fmtDeltaApex.setText(params.getProps().getProperty(UmpireParams.PROP_DeltaApex));
        fmtRTOverlap.setText(params.getProps().getProperty(UmpireParams.PROP_RTOverlap));
        
        boolean getAdjustFragIntensity = Boolean.valueOf(params.getProps().getProperty(UmpireParams.PROP_AdjustFragIntensity));
        boolean getBoostComplementaryIon = Boolean.valueOf(params.getProps().getProperty(UmpireParams.PROP_BoostComplementaryIon));
        chkAdjustFragIntensity.setSelected(getAdjustFragIntensity);
        chkBoostComplementaryIon.setSelected(getBoostComplementaryIon);

        fmtMS1PPM.setText(params.getProps().getProperty(UmpireParams.PROP_MS1PPM));
        fmtMS2PPM.setText(params.getProps().getProperty(UmpireParams.PROP_MS2PPM));
        fmtSN.setText(params.getProps().getProperty(UmpireParams.PROP_SN));
        fmtMS2SN.setText(params.getProps().getProperty(UmpireParams.PROP_MS2SN));
        fmtMinMSIntensity.setText(params.getProps().getProperty(UmpireParams.PROP_MinMSIntensity));
        fmtMinMSMSIntensity.setText(params.getProps().getProperty(UmpireParams.PROP_MinMSMSIntensity));
        fmtMaxCurveRTRange.setText(params.getProps().getProperty(UmpireParams.PROP_MaxCurveRTRange));
        fmtNoMissedScan.setText(params.getProps().getProperty(UmpireParams.PROP_NoMissedScan));
        fmtMinFrag.setText(params.getProps().getProperty(UmpireParams.PROP_MinFrag));
        chkEstimateBG.setSelected(Boolean.valueOf(params.getProps().getProperty(UmpireParams.PROP_EstimateBG)));
        fmtMinNoPeakCluster.setText(params.getProps().getProperty(UmpireParams.PROP_MinNoPeakCluster));
        fmtMaxNoPeakCluster.setText(params.getProps().getProperty(UmpireParams.PROP_MaxNoPeakCluster));


        fmtWindowSize.setText(params.getProps().getProperty(UmpireParams.PROP_WindowSize));
        //.setText(params.getProperty(UmpireParams.PROP_));


    }
    
    private void fillInUmpireQuantParams(UmpireQuantParams params) {
        Properties p = params.getProps();
        txtDecoyPrefix.setText(p.getProperty(UmpireQuantParams.PROP_DecoyPrefix));
        Boolean doInternalSearch = Boolean.valueOf(p.getProperty(UmpireQuantParams.PROP_InternalLibSearch));
        chkInternalLibSearch.setSelected(doInternalSearch);
        fmtPeptideFDR.setText(p.getProperty(UmpireQuantParams.PROP_PeptideFDR));
        fmtProteinFDR.setText(p.getProperty(UmpireQuantParams.PROP_ProteinFDR));
        Boolean datasetFdr = Boolean.valueOf(p.getProperty(UmpireQuantParams.PROP_DataSetLevelPepFDR));
        chkDataSetLevelPepFDR.setSelected(datasetFdr);
        String filterWeightName = p.getProperty(UmpireQuantParams.PROP_FilterWeight);
        comboFilterWeight.getModel().setSelectedItem(filterWeightName);
        fmtMinWeight.setText(p.getProperty(UmpireQuantParams.PROP_MinWeight));
        fmtTopNFrag.setText(p.getProperty(UmpireQuantParams.PROP_TopNFrag));
        fmtTopNPep.setText(p.getProperty(UmpireQuantParams.PROP_TopNPep));
        fmtFreq.setText(p.getProperty(UmpireQuantParams.PROP_Freq));
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */

        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException e1) {
            java.util.logging.Logger.getLogger(UmpireUnargetedDbSearchFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, e1);
            try {
                for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                    if ("Nimbus".equals(info.getName())) {
                        javax.swing.UIManager.setLookAndFeel(info.getClassName());
                        break;
                    }
                }
            } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException e2) {
                java.util.logging.Logger.getLogger(UmpireUnargetedDbSearchFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, e2);
            }
        }
        //</editor-fold>
        //</editor-fold>

        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                UmpireUnargetedDbSearchFrame frame = new UmpireUnargetedDbSearchFrame();
                frame.setVisible(true);
                Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
                frame.setLocation(dim.width/2-frame.getSize().width/2, dim.height/2-frame.getSize().height/2);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAbout;
    private javax.swing.JButton btnBinProteinProphet;
    private javax.swing.JButton btnBrowseDatabasePath;
    private javax.swing.JButton btnBrowseProgramsDir;
    private javax.swing.JButton btnClearConsole;
    private javax.swing.JButton btnProteinProphetSeqDb;
    private javax.swing.JButton btnRun;
    private javax.swing.JButton btnSelectCometParamsFile;
    private javax.swing.JButton btnSelectMSConvertBinay;
    private javax.swing.JButton btnSelectPeptideProphetBin;
    private javax.swing.JButton btnSelectPeptideProphetSeqDbPath;
    private javax.swing.JButton btnSelectPhilosopherBinary;
    private javax.swing.JButton btnSelectRawFiles;
    private javax.swing.JButton btnSelectUmpireConfig;
    private javax.swing.JButton btnSelectUmpireJar;
    private javax.swing.JButton btnSelectUmpireParamFile;
    private javax.swing.JButton btnSelectUmpireQuantJar;
    private javax.swing.JButton btnSelectWrkingDir;
    private javax.swing.JButton btnStop;
    private javax.swing.JButton btnUmpireSeCleanup;
    private javax.swing.JCheckBox chkAdjustFragIntensity;
    private javax.swing.JCheckBox chkBoostComplementaryIon;
    private javax.swing.JCheckBox chkDataSetLevelPepFDR;
    private javax.swing.JCheckBox chkEstimateBG;
    private javax.swing.JCheckBox chkInternalLibSearch;
    private javax.swing.JCheckBox chkProteinProphetAddInteractPepXmlsSeparately;
    private javax.swing.JCheckBox chkRunCometSearch;
    private javax.swing.JCheckBox chkRunPeptideProphet;
    private javax.swing.JCheckBox chkRunProteinProphet;
    private javax.swing.JCheckBox chkRunUmpire;
    private javax.swing.JCheckBox chkRunUmpireQuant;
    private javax.swing.JComboBox<String> comboFilterWeight;
    private javax.swing.JComboBox<String> comboWindowType;
    private dia.umpire.gui.TextConsole console;
    private javax.swing.JScrollPane consoleScrollPane;
    private javax.swing.JFormattedTextField fmtCorrThreshold;
    private javax.swing.JFormattedTextField fmtDeltaApex;
    private javax.swing.JFormattedTextField fmtFreq;
    private javax.swing.JFormattedTextField fmtMS1PPM;
    private javax.swing.JFormattedTextField fmtMS2PPM;
    private javax.swing.JFormattedTextField fmtMS2SN;
    private javax.swing.JFormattedTextField fmtMaxCurveRTRange;
    private javax.swing.JFormattedTextField fmtMaxNoPeakCluster;
    private javax.swing.JFormattedTextField fmtMinFrag;
    private javax.swing.JFormattedTextField fmtMinMSIntensity;
    private javax.swing.JFormattedTextField fmtMinMSMSIntensity;
    private javax.swing.JFormattedTextField fmtMinNoPeakCluster;
    private javax.swing.JFormattedTextField fmtMinWeight;
    private javax.swing.JFormattedTextField fmtNoMissedScan;
    private javax.swing.JFormattedTextField fmtPeptideFDR;
    private javax.swing.JFormattedTextField fmtProteinFDR;
    private javax.swing.JFormattedTextField fmtRFmax;
    private javax.swing.JFormattedTextField fmtRPmax;
    private javax.swing.JFormattedTextField fmtRTOverlap;
    private javax.swing.JFormattedTextField fmtSN;
    private javax.swing.JFormattedTextField fmtTopNFrag;
    private javax.swing.JFormattedTextField fmtTopNPep;
    private javax.swing.JFormattedTextField fmtWindowSize;
    private javax.swing.JFormattedTextField fmtfragment_bin_offset;
    private javax.swing.JFormattedTextField fmtfragment_bin_tol;
    private javax.swing.JFormattedTextField fmtpeptide_mass_tolerance;
    private javax.swing.JFormattedTextField fmttheoretical_fragment_ions;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel lblMsconvertBin;
    private javax.swing.JLabel lblNoMissedScan;
    private javax.swing.JLabel lblOutputDir;
    private javax.swing.JLabel lblProgramsDir;
    private javax.swing.JPanel panelCometBinary;
    private javax.swing.JPanel panelCometSequence;
    private javax.swing.JPanel panelCometTolerance;
    private javax.swing.JPanel panelInTabCometParams;
    private javax.swing.JPanel panelInTabSeParams;
    private javax.swing.JPanel panelInTabSelectFiles;
    private javax.swing.JPanel panelPeptideProphet;
    private javax.swing.JPanel panelPeptideProphetBin;
    private javax.swing.JPanel panelPeptideProphetOptions;
    private javax.swing.JPanel panelProteinProphet;
    private javax.swing.JPanel panelProteinProphetBin;
    private javax.swing.JPanel panelProteinProphetOptions;
    private javax.swing.JPanel panelRun;
    private javax.swing.JPanel panelUmpireBinary;
    private javax.swing.JPanel panelUmpireFragGroup;
    private javax.swing.JPanel panelUmpireQuant;
    private javax.swing.JPanel panelUmpireQuantBin;
    private javax.swing.JPanel panelUmpireSeParams;
    private javax.swing.JPanel panelUmpireSwathParams;
    private javax.swing.JPanel panelumpireQuantOpts;
    private javax.swing.JSpinner spinnerRam;
    private javax.swing.JSpinner spinnerThreads;
    private javax.swing.JTabbedPane tabPane;
    private javax.swing.JTextArea txtAreaSelectedFiles;
    private javax.swing.JTextField txtBinComet;
    private javax.swing.JTextField txtBinMsconvert;
    private javax.swing.JTextField txtBinPeptideProphet;
    private javax.swing.JTextField txtBinProteinProphet;
    private javax.swing.JTextField txtBinUmpire;
    private javax.swing.JTextField txtBinUmpireQuant;
    private javax.swing.JTextArea txtCometCmdLineOpts;
    private javax.swing.JTextField txtCometParamsFile;
    private javax.swing.JTextField txtCometSeqDb;
    private javax.swing.JTextField txtDecoyPrefix;
    private javax.swing.JTextArea txtPeptideProphetCmdLineOptions;
    private javax.swing.JTextField txtPeptideProphetSeqDb;
    private javax.swing.JTextField txtProgramsDir;
    private javax.swing.JTextArea txtProteinProphetCmdLineOpts;
    private javax.swing.JTextField txtProteinProphetOutputFile;
    private javax.swing.JTextField txtProteinProphetSeqDb;
    private javax.swing.JTextField txtUmpireConfigFile;
    private javax.swing.JTextField txtUmpireQuantConfig;
    private javax.swing.JTextField txtUmpireQuantSeqDb;
    private javax.swing.JTextField txtWorkingDir;
    // End of variables declaration//GEN-END:variables

}
